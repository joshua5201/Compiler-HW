State 0 conflicts: 7 shift/reduce
State 14 conflicts: 7 shift/reduce, 7 reduce/reduce
State 20 conflicts: 7 shift/reduce, 8 reduce/reduce
State 54 conflicts: 13 shift/reduce
State 74 conflicts: 16 reduce/reduce
State 75 conflicts: 16 reduce/reduce
State 76 conflicts: 16 reduce/reduce
State 190 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_and_def_list func_def decl_and_def_list
    2        | func_def decl_and_def_list
    3        | decl_and_def_list func_def

    4 decl_and_def_list: decl_and_def_list declaration
    5                  | decl_and_def_list func_def
    6                  | declaration
    7                  | func_def
    8                  | %empty

    9 declaration: const_decl
   10            | var_decl
   11            | func_decl

   12 expr: expr OR expr
   13     | expr AND expr
   14     | expr EQ expr
   15     | expr NEQ expr
   16     | expr GEQ expr
   17     | expr LEQ expr
   18     | expr '>' expr
   19     | expr '<' expr
   20     | expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '%' expr
   25     | '(' expr ')'
   26     | '-' expr
   27     | '!' expr
   28     | ID
   29     | scaler_literal
   30     | func_invoke
   31     | scaler_assignment

   32 func_invoke: ID '(' param_list ')'
   33            | ID '(' ')'

   34 param_list: param_list ',' expr
   35           | expr

   36 var_decl: type identifier_list SEMICOLON

   37 identifier_list: identifier_list ',' ID
   38                | identifier_list ',' scaler_assignment
   39                | scaler_assignment
   40                | ID

   41 scaler_assignment: ID '=' expr

   42 scaler_literal: STRING_LITERAL
   43               | FLOAT_LITERAL
   44               | INT_LITERAL
   45               | SCIENTIFIC_LITERAL
   46               | '-' FLOAT_LITERAL
   47               | '-' INT_LITERAL
   48               | '-' SCIENTIFIC_LITERAL
   49               | TRUE
   50               | FALSE

   51 const_decl: CONST type const_list SEMICOLON

   52 const_list: const_list ',' ID '=' scaler_literal
   53           | ID '=' scaler_literal

   54 func_decl: type ID '(' arg_list ')' SEMICOLON
   55          | type ID '(' ')' SEMICOLON
   56          | VOID ID '(' arg_list ')' SEMICOLON
   57          | VOID ID '(' ')' SEMICOLON

   58 arg_list: arg_list ',' argument
   59         | argument

   60 argument: type identifier

   61 $@1: %empty

   62 func_def: type ID '(' arg_list ')' $@1 func_body

   63 $@2: %empty

   64 func_def: type ID '(' ')' $@2 func_body

   65 $@3: %empty

   66 func_def: VOID ID '(' arg_list ')' $@3 func_body

   67 $@4: %empty

   68 func_def: VOID ID '(' ')' $@4 func_body

   69 type: INT
   70     | BOOL
   71     | FLOAT
   72     | DOUBLE
   73     | STRING

   74 identifier: ID

   75 stmt: compound_stmt
   76     | simple_stmt
   77     | if_stmt
   78     | while_stmt
   79     | do_stmt
   80     | for_stmt
   81     | jump_stmt
   82     | return_stmt
   83     | expr_stmt

   84 expr_stmt: expr SEMICOLON
   85          | SEMICOLON

   86 func_body: '{' block '}'
   87          | '{' '}'

   88 compound_stmt: '{' scope_marker block '}'
   89              | '{' scope_marker '}'

   90 scope_marker: %empty

   91 block: block block_element
   92      | block_element

   93 block_element: var_decl
   94              | const_decl
   95              | stmt

   96 simple_stmt: PRINT expr SEMICOLON
   97            | READ ID SEMICOLON

   98 if_stmt: IF '(' expr ')' stmt
   99        | IF '(' expr ')' stmt ELSE stmt

  100 start_loop: %empty

  101 end_loop: %empty

  102 loop_body: start_loop stmt end_loop

  103 while_stmt: WHILE '(' expr ')' loop_body

  104 do_stmt: DO loop_body WHILE '(' expr ')' SEMICOLON

  105 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' loop_body
  106         | FOR '(' expr_stmt expr SEMICOLON expr ')' loop_body
  107         | FOR '(' expr_stmt SEMICOLON expr ')' loop_body
  108         | FOR '(' expr_stmt SEMICOLON ')' loop_body

  109 return_stmt: RETURN expr SEMICOLON
  110            | RETURN SEMICOLON

  111 jump_stmt: BREAK SEMICOLON
  112          | CONTINUE SEMICOLON


Terminals, with rules where they appear

$end (0) 0
'!' (33) 27
'%' (37) 24
'(' (40) 25 32 33 54 55 56 57 62 64 66 68 98 99 103 104 105 106 107
    108
')' (41) 25 32 33 54 55 56 57 62 64 66 68 98 99 103 104 105 106 107
    108
'*' (42) 22
'+' (43) 20
',' (44) 34 37 38 52 58
'-' (45) 21 26 46 47 48
'/' (47) 23
'<' (60) 19
'=' (61) 41 52 53
'>' (62) 18
'{' (123) 86 87 88 89
'}' (125) 86 87 88 89
error (256)
SEMICOLON (258) 36 51 54 55 56 57 84 85 96 97 104 105 106 107 108 109
    110 111 112
ID (259) 28 32 33 37 40 41 52 53 54 55 56 57 62 64 66 68 74 97
WHILE (260) 103 104
DO (261) 104
IF (262) 98 99
ELSE (263) 99
TRUE (264) 49
FALSE (265) 50
FOR (266) 105 106 107 108
CONST (267) 51
READ (268) 97
CONTINUE (269) 112
BREAK (270) 111
RETURN (271) 109 110
PRINT (272) 96
STRING_LITERAL (273) 42
FLOAT_LITERAL (274) 43 46
SCIENTIFIC_LITERAL (275) 45 48
INT_LITERAL (276) 44 47
OR (277) 12
AND (278) 13
EQ (279) 14
NEQ (280) 15
GEQ (281) 16
LEQ (282) 17
INT (283) 69
BOOL (284) 70
VOID (285) 56 57 66 68
FLOAT (286) 71
DOUBLE (287) 72
STRING (288) 73


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1 2 3, on right: 0
decl_and_def_list (50)
    on left: 4 5 6 7 8, on right: 1 2 3 4 5
declaration (51)
    on left: 9 10 11, on right: 4 6
expr (52)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    30 31, on right: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
    34 35 41 84 96 98 99 103 104 105 106 107 109
func_invoke (53)
    on left: 32 33, on right: 30
param_list (54)
    on left: 34 35, on right: 32 34
var_decl (55)
    on left: 36, on right: 10 93
identifier_list (56)
    on left: 37 38 39 40, on right: 36 37 38
scaler_assignment (57)
    on left: 41, on right: 31 38 39
scaler_literal (58)
    on left: 42 43 44 45 46 47 48 49 50, on right: 29 52 53
const_decl (59)
    on left: 51, on right: 9 94
const_list (60)
    on left: 52 53, on right: 51 52
func_decl (61)
    on left: 54 55 56 57, on right: 11
arg_list (62)
    on left: 58 59, on right: 54 56 58 62 66
argument (63)
    on left: 60, on right: 58 59
func_def (64)
    on left: 62 64 66 68, on right: 1 2 3 5 7
$@1 (65)
    on left: 61, on right: 62
$@2 (66)
    on left: 63, on right: 64
$@3 (67)
    on left: 65, on right: 66
$@4 (68)
    on left: 67, on right: 68
type (69)
    on left: 69 70 71 72 73, on right: 36 51 54 55 60 62 64
identifier (70)
    on left: 74, on right: 60
stmt (71)
    on left: 75 76 77 78 79 80 81 82 83, on right: 95 98 99 102
expr_stmt (72)
    on left: 84 85, on right: 83 105 106 107 108
func_body (73)
    on left: 86 87, on right: 62 64 66 68
compound_stmt (74)
    on left: 88 89, on right: 75
scope_marker (75)
    on left: 90, on right: 88 89
block (76)
    on left: 91 92, on right: 86 88 91
block_element (77)
    on left: 93 94 95, on right: 91 92
simple_stmt (78)
    on left: 96 97, on right: 76
if_stmt (79)
    on left: 98 99, on right: 77
start_loop (80)
    on left: 100, on right: 102
end_loop (81)
    on left: 101, on right: 102
loop_body (82)
    on left: 102, on right: 103 104 105 106 107 108
while_stmt (83)
    on left: 103, on right: 78
do_stmt (84)
    on left: 104, on right: 79
for_stmt (85)
    on left: 105 106 107 108, on right: 80
return_stmt (86)
    on left: 109 110, on right: 82
jump_stmt (87)
    on left: 111 112, on right: 81


State 0

    0 $accept: . program $end

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    CONST   [reduce using rule 8 (decl_and_def_list)]
    INT     [reduce using rule 8 (decl_and_def_list)]
    BOOL    [reduce using rule 8 (decl_and_def_list)]
    VOID    [reduce using rule 8 (decl_and_def_list)]
    FLOAT   [reduce using rule 8 (decl_and_def_list)]
    DOUBLE  [reduce using rule 8 (decl_and_def_list)]
    STRING  [reduce using rule 8 (decl_and_def_list)]

    program            go to state 8
    decl_and_def_list  go to state 9
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 14
    type               go to state 15


State 1

   51 const_decl: CONST . type const_list SEMICOLON

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 16


State 2

   69 type: INT .

    $default  reduce using rule 69 (type)


State 3

   70 type: BOOL .

    $default  reduce using rule 70 (type)


State 4

   56 func_decl: VOID . ID '(' arg_list ')' SEMICOLON
   57          | VOID . ID '(' ')' SEMICOLON
   66 func_def: VOID . ID '(' arg_list ')' $@3 func_body
   68         | VOID . ID '(' ')' $@4 func_body

    ID  shift, and go to state 17


State 5

   71 type: FLOAT .

    $default  reduce using rule 71 (type)


State 6

   72 type: DOUBLE .

    $default  reduce using rule 72 (type)


State 7

   73 type: STRING .

    $default  reduce using rule 73 (type)


State 8

    0 $accept: program . $end

    $end  shift, and go to state 18


State 9

    1 program: decl_and_def_list . func_def decl_and_def_list
    3        | decl_and_def_list . func_def
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 20
    type         go to state 15


State 10

    6 decl_and_def_list: declaration .

    $default  reduce using rule 6 (decl_and_def_list)


State 11

   10 declaration: var_decl .

    $default  reduce using rule 10 (declaration)


State 12

    9 declaration: const_decl .

    $default  reduce using rule 9 (declaration)


State 13

   11 declaration: func_decl .

    $default  reduce using rule 11 (declaration)


State 14

    2 program: func_def . decl_and_def_list
    7 decl_and_def_list: func_def .

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    CONST     [reduce using rule 7 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    INT       [reduce using rule 7 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 7 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 7 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 7 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 7 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 7 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 8 (decl_and_def_list)

    decl_and_def_list  go to state 21
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 15

   36 var_decl: type . identifier_list SEMICOLON
   54 func_decl: type . ID '(' arg_list ')' SEMICOLON
   55          | type . ID '(' ')' SEMICOLON
   62 func_def: type . ID '(' arg_list ')' $@1 func_body
   64         | type . ID '(' ')' $@2 func_body

    ID  shift, and go to state 23

    identifier_list    go to state 24
    scaler_assignment  go to state 25


State 16

   51 const_decl: CONST type . const_list SEMICOLON

    ID  shift, and go to state 26

    const_list  go to state 27


State 17

   56 func_decl: VOID ID . '(' arg_list ')' SEMICOLON
   57          | VOID ID . '(' ')' SEMICOLON
   66 func_def: VOID ID . '(' arg_list ')' $@3 func_body
   68         | VOID ID . '(' ')' $@4 func_body

    '('  shift, and go to state 28


State 18

    0 $accept: program $end .

    $default  accept


State 19

    4 decl_and_def_list: decl_and_def_list declaration .

    $default  reduce using rule 4 (decl_and_def_list)


State 20

    1 program: decl_and_def_list func_def . decl_and_def_list
    3        | decl_and_def_list func_def .
    5 decl_and_def_list: decl_and_def_list func_def .

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $end      reduce using rule 3 (program)
    $end      [reduce using rule 8 (decl_and_def_list)]
    CONST     [reduce using rule 5 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    INT       [reduce using rule 5 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 5 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 5 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 5 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 5 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 5 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 3 (program)

    decl_and_def_list  go to state 29
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 21

    2 program: func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 2 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 30
    type         go to state 15


State 22

    7 decl_and_def_list: func_def .

    $default  reduce using rule 7 (decl_and_def_list)


State 23

   40 identifier_list: ID .
   41 scaler_assignment: ID . '=' expr
   54 func_decl: type ID . '(' arg_list ')' SEMICOLON
   55          | type ID . '(' ')' SEMICOLON
   62 func_def: type ID . '(' arg_list ')' $@1 func_body
   64         | type ID . '(' ')' $@2 func_body

    '('  shift, and go to state 31
    '='  shift, and go to state 32

    $default  reduce using rule 40 (identifier_list)


State 24

   36 var_decl: type identifier_list . SEMICOLON
   37 identifier_list: identifier_list . ',' ID
   38                | identifier_list . ',' scaler_assignment

    SEMICOLON  shift, and go to state 33
    ','        shift, and go to state 34


State 25

   39 identifier_list: scaler_assignment .

    $default  reduce using rule 39 (identifier_list)


State 26

   53 const_list: ID . '=' scaler_literal

    '='  shift, and go to state 35


State 27

   51 const_decl: CONST type const_list . SEMICOLON
   52 const_list: const_list . ',' ID '=' scaler_literal

    SEMICOLON  shift, and go to state 36
    ','        shift, and go to state 37


State 28

   56 func_decl: VOID ID '(' . arg_list ')' SEMICOLON
   57          | VOID ID '(' . ')' SEMICOLON
   66 func_def: VOID ID '(' . arg_list ')' $@3 func_body
   68         | VOID ID '(' . ')' $@4 func_body

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 38

    arg_list  go to state 39
    argument  go to state 40
    type      go to state 41


State 29

    1 program: decl_and_def_list func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 1 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 30
    type         go to state 15


State 30

    5 decl_and_def_list: decl_and_def_list func_def .

    $default  reduce using rule 5 (decl_and_def_list)


State 31

   54 func_decl: type ID '(' . arg_list ')' SEMICOLON
   55          | type ID '(' . ')' SEMICOLON
   62 func_def: type ID '(' . arg_list ')' $@1 func_body
   64         | type ID '(' . ')' $@2 func_body

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 42

    arg_list  go to state 43
    argument  go to state 40
    type      go to state 41


State 32

   41 scaler_assignment: ID '=' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 54
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 33

   36 var_decl: type identifier_list SEMICOLON .

    $default  reduce using rule 36 (var_decl)


State 34

   37 identifier_list: identifier_list ',' . ID
   38                | identifier_list ',' . scaler_assignment

    ID  shift, and go to state 58

    scaler_assignment  go to state 59


State 35

   53 const_list: ID '=' . scaler_literal

    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '-'                 shift, and go to state 60

    scaler_literal  go to state 61


State 36

   51 const_decl: CONST type const_list SEMICOLON .

    $default  reduce using rule 51 (const_decl)


State 37

   52 const_list: const_list ',' . ID '=' scaler_literal

    ID  shift, and go to state 62


State 38

   57 func_decl: VOID ID '(' ')' . SEMICOLON
   68 func_def: VOID ID '(' ')' . $@4 func_body

    SEMICOLON  shift, and go to state 63

    $default  reduce using rule 67 ($@4)

    $@4  go to state 64


State 39

   56 func_decl: VOID ID '(' arg_list . ')' SEMICOLON
   58 arg_list: arg_list . ',' argument
   66 func_def: VOID ID '(' arg_list . ')' $@3 func_body

    ')'  shift, and go to state 65
    ','  shift, and go to state 66


State 40

   59 arg_list: argument .

    $default  reduce using rule 59 (arg_list)


State 41

   60 argument: type . identifier

    ID  shift, and go to state 67

    identifier  go to state 68


State 42

   55 func_decl: type ID '(' ')' . SEMICOLON
   64 func_def: type ID '(' ')' . $@2 func_body

    SEMICOLON  shift, and go to state 69

    $default  reduce using rule 63 ($@2)

    $@2  go to state 70


State 43

   54 func_decl: type ID '(' arg_list . ')' SEMICOLON
   58 arg_list: arg_list . ',' argument
   62 func_def: type ID '(' arg_list . ')' $@1 func_body

    ')'  shift, and go to state 71
    ','  shift, and go to state 66


State 44

   28 expr: ID .
   32 func_invoke: ID . '(' param_list ')'
   33            | ID . '(' ')'
   41 scaler_assignment: ID . '=' expr

    '('  shift, and go to state 72
    '='  shift, and go to state 32

    $default  reduce using rule 28 (expr)


State 45

   49 scaler_literal: TRUE .

    $default  reduce using rule 49 (scaler_literal)


State 46

   50 scaler_literal: FALSE .

    $default  reduce using rule 50 (scaler_literal)


State 47

   42 scaler_literal: STRING_LITERAL .

    $default  reduce using rule 42 (scaler_literal)


State 48

   43 scaler_literal: FLOAT_LITERAL .

    $default  reduce using rule 43 (scaler_literal)


State 49

   45 scaler_literal: SCIENTIFIC_LITERAL .

    $default  reduce using rule 45 (scaler_literal)


State 50

   44 scaler_literal: INT_LITERAL .

    $default  reduce using rule 44 (scaler_literal)


State 51

   27 expr: '!' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 73
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 52

   26 expr: '-' . expr
   46 scaler_literal: '-' . FLOAT_LITERAL
   47               | '-' . INT_LITERAL
   48               | '-' . SCIENTIFIC_LITERAL

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 74
    SCIENTIFIC_LITERAL  shift, and go to state 75
    INT_LITERAL         shift, and go to state 76
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 77
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 53

   25 expr: '(' . expr ')'

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 78
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 54

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   41 scaler_assignment: ID '=' expr .

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    OR        [reduce using rule 41 (scaler_assignment)]
    AND       [reduce using rule 41 (scaler_assignment)]
    EQ        [reduce using rule 41 (scaler_assignment)]
    NEQ       [reduce using rule 41 (scaler_assignment)]
    GEQ       [reduce using rule 41 (scaler_assignment)]
    LEQ       [reduce using rule 41 (scaler_assignment)]
    '<'       [reduce using rule 41 (scaler_assignment)]
    '>'       [reduce using rule 41 (scaler_assignment)]
    '+'       [reduce using rule 41 (scaler_assignment)]
    '-'       [reduce using rule 41 (scaler_assignment)]
    '*'       [reduce using rule 41 (scaler_assignment)]
    '/'       [reduce using rule 41 (scaler_assignment)]
    '%'       [reduce using rule 41 (scaler_assignment)]
    $default  reduce using rule 41 (scaler_assignment)


State 55

   30 expr: func_invoke .

    $default  reduce using rule 30 (expr)


State 56

   31 expr: scaler_assignment .

    $default  reduce using rule 31 (expr)


State 57

   29 expr: scaler_literal .

    $default  reduce using rule 29 (expr)


State 58

   37 identifier_list: identifier_list ',' ID .
   41 scaler_assignment: ID . '=' expr

    '='  shift, and go to state 32

    $default  reduce using rule 37 (identifier_list)


State 59

   38 identifier_list: identifier_list ',' scaler_assignment .

    $default  reduce using rule 38 (identifier_list)


State 60

   46 scaler_literal: '-' . FLOAT_LITERAL
   47               | '-' . INT_LITERAL
   48               | '-' . SCIENTIFIC_LITERAL

    FLOAT_LITERAL       shift, and go to state 92
    SCIENTIFIC_LITERAL  shift, and go to state 93
    INT_LITERAL         shift, and go to state 94


State 61

   53 const_list: ID '=' scaler_literal .

    $default  reduce using rule 53 (const_list)


State 62

   52 const_list: const_list ',' ID . '=' scaler_literal

    '='  shift, and go to state 95


State 63

   57 func_decl: VOID ID '(' ')' SEMICOLON .

    $default  reduce using rule 57 (func_decl)


State 64

   68 func_def: VOID ID '(' ')' $@4 . func_body

    '{'  shift, and go to state 96

    func_body  go to state 97


State 65

   56 func_decl: VOID ID '(' arg_list ')' . SEMICOLON
   66 func_def: VOID ID '(' arg_list ')' . $@3 func_body

    SEMICOLON  shift, and go to state 98

    $default  reduce using rule 65 ($@3)

    $@3  go to state 99


State 66

   58 arg_list: arg_list ',' . argument

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    argument  go to state 100
    type      go to state 41


State 67

   74 identifier: ID .

    $default  reduce using rule 74 (identifier)


State 68

   60 argument: type identifier .

    $default  reduce using rule 60 (argument)


State 69

   55 func_decl: type ID '(' ')' SEMICOLON .

    $default  reduce using rule 55 (func_decl)


State 70

   64 func_def: type ID '(' ')' $@2 . func_body

    '{'  shift, and go to state 96

    func_body  go to state 101


State 71

   54 func_decl: type ID '(' arg_list ')' . SEMICOLON
   62 func_def: type ID '(' arg_list ')' . $@1 func_body

    SEMICOLON  shift, and go to state 102

    $default  reduce using rule 61 ($@1)

    $@1  go to state 103


State 72

   32 func_invoke: ID '(' . param_list ')'
   33            | ID '(' . ')'

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    ')'                 shift, and go to state 104

    expr               go to state 105
    func_invoke        go to state 55
    param_list         go to state 106
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 73

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   27     | '!' expr .

    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 27 (expr)


State 74

   43 scaler_literal: FLOAT_LITERAL .
   46               | '-' FLOAT_LITERAL .

    SEMICOLON  reduce using rule 43 (scaler_literal)
    SEMICOLON  [reduce using rule 46 (scaler_literal)]
    OR         reduce using rule 43 (scaler_literal)
    OR         [reduce using rule 46 (scaler_literal)]
    AND        reduce using rule 43 (scaler_literal)
    AND        [reduce using rule 46 (scaler_literal)]
    EQ         reduce using rule 43 (scaler_literal)
    EQ         [reduce using rule 46 (scaler_literal)]
    NEQ        reduce using rule 43 (scaler_literal)
    NEQ        [reduce using rule 46 (scaler_literal)]
    GEQ        reduce using rule 43 (scaler_literal)
    GEQ        [reduce using rule 46 (scaler_literal)]
    LEQ        reduce using rule 43 (scaler_literal)
    LEQ        [reduce using rule 46 (scaler_literal)]
    '<'        reduce using rule 43 (scaler_literal)
    '<'        [reduce using rule 46 (scaler_literal)]
    '>'        reduce using rule 43 (scaler_literal)
    '>'        [reduce using rule 46 (scaler_literal)]
    '+'        reduce using rule 43 (scaler_literal)
    '+'        [reduce using rule 46 (scaler_literal)]
    '-'        reduce using rule 43 (scaler_literal)
    '-'        [reduce using rule 46 (scaler_literal)]
    '*'        reduce using rule 43 (scaler_literal)
    '*'        [reduce using rule 46 (scaler_literal)]
    '/'        reduce using rule 43 (scaler_literal)
    '/'        [reduce using rule 46 (scaler_literal)]
    '%'        reduce using rule 43 (scaler_literal)
    '%'        [reduce using rule 46 (scaler_literal)]
    ')'        reduce using rule 43 (scaler_literal)
    ')'        [reduce using rule 46 (scaler_literal)]
    ','        reduce using rule 43 (scaler_literal)
    ','        [reduce using rule 46 (scaler_literal)]
    $default   reduce using rule 43 (scaler_literal)


State 75

   45 scaler_literal: SCIENTIFIC_LITERAL .
   48               | '-' SCIENTIFIC_LITERAL .

    SEMICOLON  reduce using rule 45 (scaler_literal)
    SEMICOLON  [reduce using rule 48 (scaler_literal)]
    OR         reduce using rule 45 (scaler_literal)
    OR         [reduce using rule 48 (scaler_literal)]
    AND        reduce using rule 45 (scaler_literal)
    AND        [reduce using rule 48 (scaler_literal)]
    EQ         reduce using rule 45 (scaler_literal)
    EQ         [reduce using rule 48 (scaler_literal)]
    NEQ        reduce using rule 45 (scaler_literal)
    NEQ        [reduce using rule 48 (scaler_literal)]
    GEQ        reduce using rule 45 (scaler_literal)
    GEQ        [reduce using rule 48 (scaler_literal)]
    LEQ        reduce using rule 45 (scaler_literal)
    LEQ        [reduce using rule 48 (scaler_literal)]
    '<'        reduce using rule 45 (scaler_literal)
    '<'        [reduce using rule 48 (scaler_literal)]
    '>'        reduce using rule 45 (scaler_literal)
    '>'        [reduce using rule 48 (scaler_literal)]
    '+'        reduce using rule 45 (scaler_literal)
    '+'        [reduce using rule 48 (scaler_literal)]
    '-'        reduce using rule 45 (scaler_literal)
    '-'        [reduce using rule 48 (scaler_literal)]
    '*'        reduce using rule 45 (scaler_literal)
    '*'        [reduce using rule 48 (scaler_literal)]
    '/'        reduce using rule 45 (scaler_literal)
    '/'        [reduce using rule 48 (scaler_literal)]
    '%'        reduce using rule 45 (scaler_literal)
    '%'        [reduce using rule 48 (scaler_literal)]
    ')'        reduce using rule 45 (scaler_literal)
    ')'        [reduce using rule 48 (scaler_literal)]
    ','        reduce using rule 45 (scaler_literal)
    ','        [reduce using rule 48 (scaler_literal)]
    $default   reduce using rule 45 (scaler_literal)


State 76

   44 scaler_literal: INT_LITERAL .
   47               | '-' INT_LITERAL .

    SEMICOLON  reduce using rule 44 (scaler_literal)
    SEMICOLON  [reduce using rule 47 (scaler_literal)]
    OR         reduce using rule 44 (scaler_literal)
    OR         [reduce using rule 47 (scaler_literal)]
    AND        reduce using rule 44 (scaler_literal)
    AND        [reduce using rule 47 (scaler_literal)]
    EQ         reduce using rule 44 (scaler_literal)
    EQ         [reduce using rule 47 (scaler_literal)]
    NEQ        reduce using rule 44 (scaler_literal)
    NEQ        [reduce using rule 47 (scaler_literal)]
    GEQ        reduce using rule 44 (scaler_literal)
    GEQ        [reduce using rule 47 (scaler_literal)]
    LEQ        reduce using rule 44 (scaler_literal)
    LEQ        [reduce using rule 47 (scaler_literal)]
    '<'        reduce using rule 44 (scaler_literal)
    '<'        [reduce using rule 47 (scaler_literal)]
    '>'        reduce using rule 44 (scaler_literal)
    '>'        [reduce using rule 47 (scaler_literal)]
    '+'        reduce using rule 44 (scaler_literal)
    '+'        [reduce using rule 47 (scaler_literal)]
    '-'        reduce using rule 44 (scaler_literal)
    '-'        [reduce using rule 47 (scaler_literal)]
    '*'        reduce using rule 44 (scaler_literal)
    '*'        [reduce using rule 47 (scaler_literal)]
    '/'        reduce using rule 44 (scaler_literal)
    '/'        [reduce using rule 47 (scaler_literal)]
    '%'        reduce using rule 44 (scaler_literal)
    '%'        [reduce using rule 47 (scaler_literal)]
    ')'        reduce using rule 44 (scaler_literal)
    ')'        [reduce using rule 47 (scaler_literal)]
    ','        reduce using rule 44 (scaler_literal)
    ','        [reduce using rule 47 (scaler_literal)]
    $default   reduce using rule 44 (scaler_literal)


State 77

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   26     | '-' expr .

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 26 (expr)


State 78

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   25     | '(' expr . ')'

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 107


State 79

   12 expr: expr OR . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 108
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 80

   13 expr: expr AND . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 109
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 81

   14 expr: expr EQ . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 110
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 82

   15 expr: expr NEQ . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 111
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 83

   16 expr: expr GEQ . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 112
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 84

   17 expr: expr LEQ . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 113
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 85

   19 expr: expr '<' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 114
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 86

   18 expr: expr '>' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 115
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 87

   20 expr: expr '+' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 116
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 88

   21 expr: expr '-' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 117
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 89

   22 expr: expr '*' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 118
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 90

   23 expr: expr '/' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 119
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 91

   24 expr: expr '%' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 120
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 92

   46 scaler_literal: '-' FLOAT_LITERAL .

    $default  reduce using rule 46 (scaler_literal)


State 93

   48 scaler_literal: '-' SCIENTIFIC_LITERAL .

    $default  reduce using rule 48 (scaler_literal)


State 94

   47 scaler_literal: '-' INT_LITERAL .

    $default  reduce using rule 47 (scaler_literal)


State 95

   52 const_list: const_list ',' ID '=' . scaler_literal

    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '-'                 shift, and go to state 60

    scaler_literal  go to state 121


State 96

   86 func_body: '{' . block '}'
   87          | '{' . '}'

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    WHILE               shift, and go to state 123
    DO                  shift, and go to state 124
    IF                  shift, and go to state 125
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    FOR                 shift, and go to state 126
    CONST               shift, and go to state 1
    READ                shift, and go to state 127
    CONTINUE            shift, and go to state 128
    BREAK               shift, and go to state 129
    RETURN              shift, and go to state 130
    PRINT               shift, and go to state 131
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    '{'                 shift, and go to state 132
    '}'                 shift, and go to state 133

    expr               go to state 134
    func_invoke        go to state 55
    var_decl           go to state 135
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    const_decl         go to state 136
    type               go to state 137
    stmt               go to state 138
    expr_stmt          go to state 139
    compound_stmt      go to state 140
    block              go to state 141
    block_element      go to state 142
    simple_stmt        go to state 143
    if_stmt            go to state 144
    while_stmt         go to state 145
    do_stmt            go to state 146
    for_stmt           go to state 147
    return_stmt        go to state 148
    jump_stmt          go to state 149


State 97

   68 func_def: VOID ID '(' ')' $@4 func_body .

    $default  reduce using rule 68 (func_def)


State 98

   56 func_decl: VOID ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 56 (func_decl)


State 99

   66 func_def: VOID ID '(' arg_list ')' $@3 . func_body

    '{'  shift, and go to state 96

    func_body  go to state 150


State 100

   58 arg_list: arg_list ',' argument .

    $default  reduce using rule 58 (arg_list)


State 101

   64 func_def: type ID '(' ')' $@2 func_body .

    $default  reduce using rule 64 (func_def)


State 102

   54 func_decl: type ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 54 (func_decl)


State 103

   62 func_def: type ID '(' arg_list ')' $@1 . func_body

    '{'  shift, and go to state 96

    func_body  go to state 151


State 104

   33 func_invoke: ID '(' ')' .

    $default  reduce using rule 33 (func_invoke)


State 105

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   35 param_list: expr .

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 35 (param_list)


State 106

   32 func_invoke: ID '(' param_list . ')'
   34 param_list: param_list . ',' expr

    ')'  shift, and go to state 152
    ','  shift, and go to state 153


State 107

   25 expr: '(' expr ')' .

    $default  reduce using rule 25 (expr)


State 108

   12 expr: expr . OR expr
   12     | expr OR expr .
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 12 (expr)


State 109

   12 expr: expr . OR expr
   13     | expr . AND expr
   13     | expr AND expr .
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 13 (expr)


State 110

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   14     | expr EQ expr .
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 14 (expr)


State 111

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   15     | expr NEQ expr .
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 15 (expr)


State 112

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   16     | expr GEQ expr .
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 16 (expr)


State 113

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   17     | expr LEQ expr .
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 17 (expr)


State 114

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   19     | expr '<' expr .
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 19 (expr)


State 115

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   18     | expr '>' expr .
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 18 (expr)


State 116

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   20     | expr '+' expr .
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 20 (expr)


State 117

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 21 (expr)


State 118

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '%' expr

    $default  reduce using rule 22 (expr)


State 119

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '%' expr

    $default  reduce using rule 23 (expr)


State 120

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   24     | expr '%' expr .

    $default  reduce using rule 24 (expr)


State 121

   52 const_list: const_list ',' ID '=' scaler_literal .

    $default  reduce using rule 52 (const_list)


State 122

   85 expr_stmt: SEMICOLON .

    $default  reduce using rule 85 (expr_stmt)


State 123

  103 while_stmt: WHILE . '(' expr ')' loop_body

    '('  shift, and go to state 154


State 124

  104 do_stmt: DO . loop_body WHILE '(' expr ')' SEMICOLON

    $default  reduce using rule 100 (start_loop)

    start_loop  go to state 155
    loop_body   go to state 156


State 125

   98 if_stmt: IF . '(' expr ')' stmt
   99        | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 157


State 126

  105 for_stmt: FOR . '(' expr_stmt expr SEMICOLON ')' loop_body
  106         | FOR . '(' expr_stmt expr SEMICOLON expr ')' loop_body
  107         | FOR . '(' expr_stmt SEMICOLON expr ')' loop_body
  108         | FOR . '(' expr_stmt SEMICOLON ')' loop_body

    '('  shift, and go to state 158


State 127

   97 simple_stmt: READ . ID SEMICOLON

    ID  shift, and go to state 159


State 128

  112 jump_stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 160


State 129

  111 jump_stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 161


State 130

  109 return_stmt: RETURN . expr SEMICOLON
  110            | RETURN . SEMICOLON

    SEMICOLON           shift, and go to state 162
    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 163
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 131

   96 simple_stmt: PRINT . expr SEMICOLON

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 164
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 132

   88 compound_stmt: '{' . scope_marker block '}'
   89              | '{' . scope_marker '}'

    $default  reduce using rule 90 (scope_marker)

    scope_marker  go to state 165


State 133

   87 func_body: '{' '}' .

    $default  reduce using rule 87 (func_body)


State 134

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   84 expr_stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 166
    OR         shift, and go to state 79
    AND        shift, and go to state 80
    EQ         shift, and go to state 81
    NEQ        shift, and go to state 82
    GEQ        shift, and go to state 83
    LEQ        shift, and go to state 84
    '<'        shift, and go to state 85
    '>'        shift, and go to state 86
    '+'        shift, and go to state 87
    '-'        shift, and go to state 88
    '*'        shift, and go to state 89
    '/'        shift, and go to state 90
    '%'        shift, and go to state 91


State 135

   93 block_element: var_decl .

    $default  reduce using rule 93 (block_element)


State 136

   94 block_element: const_decl .

    $default  reduce using rule 94 (block_element)


State 137

   36 var_decl: type . identifier_list SEMICOLON

    ID  shift, and go to state 167

    identifier_list    go to state 24
    scaler_assignment  go to state 25


State 138

   95 block_element: stmt .

    $default  reduce using rule 95 (block_element)


State 139

   83 stmt: expr_stmt .

    $default  reduce using rule 83 (stmt)


State 140

   75 stmt: compound_stmt .

    $default  reduce using rule 75 (stmt)


State 141

   86 func_body: '{' block . '}'
   91 block: block . block_element

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    WHILE               shift, and go to state 123
    DO                  shift, and go to state 124
    IF                  shift, and go to state 125
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    FOR                 shift, and go to state 126
    CONST               shift, and go to state 1
    READ                shift, and go to state 127
    CONTINUE            shift, and go to state 128
    BREAK               shift, and go to state 129
    RETURN              shift, and go to state 130
    PRINT               shift, and go to state 131
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    '{'                 shift, and go to state 132
    '}'                 shift, and go to state 168

    expr               go to state 134
    func_invoke        go to state 55
    var_decl           go to state 135
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    const_decl         go to state 136
    type               go to state 137
    stmt               go to state 138
    expr_stmt          go to state 139
    compound_stmt      go to state 140
    block_element      go to state 169
    simple_stmt        go to state 143
    if_stmt            go to state 144
    while_stmt         go to state 145
    do_stmt            go to state 146
    for_stmt           go to state 147
    return_stmt        go to state 148
    jump_stmt          go to state 149


State 142

   92 block: block_element .

    $default  reduce using rule 92 (block)


State 143

   76 stmt: simple_stmt .

    $default  reduce using rule 76 (stmt)


State 144

   77 stmt: if_stmt .

    $default  reduce using rule 77 (stmt)


State 145

   78 stmt: while_stmt .

    $default  reduce using rule 78 (stmt)


State 146

   79 stmt: do_stmt .

    $default  reduce using rule 79 (stmt)


State 147

   80 stmt: for_stmt .

    $default  reduce using rule 80 (stmt)


State 148

   82 stmt: return_stmt .

    $default  reduce using rule 82 (stmt)


State 149

   81 stmt: jump_stmt .

    $default  reduce using rule 81 (stmt)


State 150

   66 func_def: VOID ID '(' arg_list ')' $@3 func_body .

    $default  reduce using rule 66 (func_def)


State 151

   62 func_def: type ID '(' arg_list ')' $@1 func_body .

    $default  reduce using rule 62 (func_def)


State 152

   32 func_invoke: ID '(' param_list ')' .

    $default  reduce using rule 32 (func_invoke)


State 153

   34 param_list: param_list ',' . expr

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 170
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 154

  103 while_stmt: WHILE '(' . expr ')' loop_body

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 171
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 155

  102 loop_body: start_loop . stmt end_loop

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    WHILE               shift, and go to state 123
    DO                  shift, and go to state 124
    IF                  shift, and go to state 125
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    FOR                 shift, and go to state 126
    READ                shift, and go to state 127
    CONTINUE            shift, and go to state 128
    BREAK               shift, and go to state 129
    RETURN              shift, and go to state 130
    PRINT               shift, and go to state 131
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    '{'                 shift, and go to state 132

    expr               go to state 134
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    stmt               go to state 172
    expr_stmt          go to state 139
    compound_stmt      go to state 140
    simple_stmt        go to state 143
    if_stmt            go to state 144
    while_stmt         go to state 145
    do_stmt            go to state 146
    for_stmt           go to state 147
    return_stmt        go to state 148
    jump_stmt          go to state 149


State 156

  104 do_stmt: DO loop_body . WHILE '(' expr ')' SEMICOLON

    WHILE  shift, and go to state 173


State 157

   98 if_stmt: IF '(' . expr ')' stmt
   99        | IF '(' . expr ')' stmt ELSE stmt

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 174
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 158

  105 for_stmt: FOR '(' . expr_stmt expr SEMICOLON ')' loop_body
  106         | FOR '(' . expr_stmt expr SEMICOLON expr ')' loop_body
  107         | FOR '(' . expr_stmt SEMICOLON expr ')' loop_body
  108         | FOR '(' . expr_stmt SEMICOLON ')' loop_body

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 134
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    expr_stmt          go to state 175


State 159

   97 simple_stmt: READ ID . SEMICOLON

    SEMICOLON  shift, and go to state 176


State 160

  112 jump_stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 112 (jump_stmt)


State 161

  111 jump_stmt: BREAK SEMICOLON .

    $default  reduce using rule 111 (jump_stmt)


State 162

  110 return_stmt: RETURN SEMICOLON .

    $default  reduce using rule 110 (return_stmt)


State 163

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  109 return_stmt: RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 177
    OR         shift, and go to state 79
    AND        shift, and go to state 80
    EQ         shift, and go to state 81
    NEQ        shift, and go to state 82
    GEQ        shift, and go to state 83
    LEQ        shift, and go to state 84
    '<'        shift, and go to state 85
    '>'        shift, and go to state 86
    '+'        shift, and go to state 87
    '-'        shift, and go to state 88
    '*'        shift, and go to state 89
    '/'        shift, and go to state 90
    '%'        shift, and go to state 91


State 164

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   96 simple_stmt: PRINT expr . SEMICOLON

    SEMICOLON  shift, and go to state 178
    OR         shift, and go to state 79
    AND        shift, and go to state 80
    EQ         shift, and go to state 81
    NEQ        shift, and go to state 82
    GEQ        shift, and go to state 83
    LEQ        shift, and go to state 84
    '<'        shift, and go to state 85
    '>'        shift, and go to state 86
    '+'        shift, and go to state 87
    '-'        shift, and go to state 88
    '*'        shift, and go to state 89
    '/'        shift, and go to state 90
    '%'        shift, and go to state 91


State 165

   88 compound_stmt: '{' scope_marker . block '}'
   89              | '{' scope_marker . '}'

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    WHILE               shift, and go to state 123
    DO                  shift, and go to state 124
    IF                  shift, and go to state 125
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    FOR                 shift, and go to state 126
    CONST               shift, and go to state 1
    READ                shift, and go to state 127
    CONTINUE            shift, and go to state 128
    BREAK               shift, and go to state 129
    RETURN              shift, and go to state 130
    PRINT               shift, and go to state 131
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    '{'                 shift, and go to state 132
    '}'                 shift, and go to state 179

    expr               go to state 134
    func_invoke        go to state 55
    var_decl           go to state 135
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    const_decl         go to state 136
    type               go to state 137
    stmt               go to state 138
    expr_stmt          go to state 139
    compound_stmt      go to state 140
    block              go to state 180
    block_element      go to state 142
    simple_stmt        go to state 143
    if_stmt            go to state 144
    while_stmt         go to state 145
    do_stmt            go to state 146
    for_stmt           go to state 147
    return_stmt        go to state 148
    jump_stmt          go to state 149


State 166

   84 expr_stmt: expr SEMICOLON .

    $default  reduce using rule 84 (expr_stmt)


State 167

   40 identifier_list: ID .
   41 scaler_assignment: ID . '=' expr

    '='  shift, and go to state 32

    $default  reduce using rule 40 (identifier_list)


State 168

   86 func_body: '{' block '}' .

    $default  reduce using rule 86 (func_body)


State 169

   91 block: block block_element .

    $default  reduce using rule 91 (block)


State 170

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   34 param_list: param_list ',' expr .

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 34 (param_list)


State 171

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  103 while_stmt: WHILE '(' expr . ')' loop_body

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 181


State 172

  102 loop_body: start_loop stmt . end_loop

    $default  reduce using rule 101 (end_loop)

    end_loop  go to state 182


State 173

  104 do_stmt: DO loop_body WHILE . '(' expr ')' SEMICOLON

    '('  shift, and go to state 183


State 174

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   98 if_stmt: IF '(' expr . ')' stmt
   99        | IF '(' expr . ')' stmt ELSE stmt

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 184


State 175

  105 for_stmt: FOR '(' expr_stmt . expr SEMICOLON ')' loop_body
  106         | FOR '(' expr_stmt . expr SEMICOLON expr ')' loop_body
  107         | FOR '(' expr_stmt . SEMICOLON expr ')' loop_body
  108         | FOR '(' expr_stmt . SEMICOLON ')' loop_body

    SEMICOLON           shift, and go to state 185
    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 186
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 176

   97 simple_stmt: READ ID SEMICOLON .

    $default  reduce using rule 97 (simple_stmt)


State 177

  109 return_stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 109 (return_stmt)


State 178

   96 simple_stmt: PRINT expr SEMICOLON .

    $default  reduce using rule 96 (simple_stmt)


State 179

   89 compound_stmt: '{' scope_marker '}' .

    $default  reduce using rule 89 (compound_stmt)


State 180

   88 compound_stmt: '{' scope_marker block . '}'
   91 block: block . block_element

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    WHILE               shift, and go to state 123
    DO                  shift, and go to state 124
    IF                  shift, and go to state 125
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    FOR                 shift, and go to state 126
    CONST               shift, and go to state 1
    READ                shift, and go to state 127
    CONTINUE            shift, and go to state 128
    BREAK               shift, and go to state 129
    RETURN              shift, and go to state 130
    PRINT               shift, and go to state 131
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    '{'                 shift, and go to state 132
    '}'                 shift, and go to state 187

    expr               go to state 134
    func_invoke        go to state 55
    var_decl           go to state 135
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    const_decl         go to state 136
    type               go to state 137
    stmt               go to state 138
    expr_stmt          go to state 139
    compound_stmt      go to state 140
    block_element      go to state 169
    simple_stmt        go to state 143
    if_stmt            go to state 144
    while_stmt         go to state 145
    do_stmt            go to state 146
    for_stmt           go to state 147
    return_stmt        go to state 148
    jump_stmt          go to state 149


State 181

  103 while_stmt: WHILE '(' expr ')' . loop_body

    $default  reduce using rule 100 (start_loop)

    start_loop  go to state 155
    loop_body   go to state 188


State 182

  102 loop_body: start_loop stmt end_loop .

    $default  reduce using rule 102 (loop_body)


State 183

  104 do_stmt: DO loop_body WHILE '(' . expr ')' SEMICOLON

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53

    expr               go to state 189
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 184

   98 if_stmt: IF '(' expr ')' . stmt
   99        | IF '(' expr ')' . stmt ELSE stmt

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    WHILE               shift, and go to state 123
    DO                  shift, and go to state 124
    IF                  shift, and go to state 125
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    FOR                 shift, and go to state 126
    READ                shift, and go to state 127
    CONTINUE            shift, and go to state 128
    BREAK               shift, and go to state 129
    RETURN              shift, and go to state 130
    PRINT               shift, and go to state 131
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    '{'                 shift, and go to state 132

    expr               go to state 134
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    stmt               go to state 190
    expr_stmt          go to state 139
    compound_stmt      go to state 140
    simple_stmt        go to state 143
    if_stmt            go to state 144
    while_stmt         go to state 145
    do_stmt            go to state 146
    for_stmt           go to state 147
    return_stmt        go to state 148
    jump_stmt          go to state 149


State 185

  107 for_stmt: FOR '(' expr_stmt SEMICOLON . expr ')' loop_body
  108         | FOR '(' expr_stmt SEMICOLON . ')' loop_body

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    ')'                 shift, and go to state 191

    expr               go to state 192
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 186

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  105 for_stmt: FOR '(' expr_stmt expr . SEMICOLON ')' loop_body
  106         | FOR '(' expr_stmt expr . SEMICOLON expr ')' loop_body

    SEMICOLON  shift, and go to state 193
    OR         shift, and go to state 79
    AND        shift, and go to state 80
    EQ         shift, and go to state 81
    NEQ        shift, and go to state 82
    GEQ        shift, and go to state 83
    LEQ        shift, and go to state 84
    '<'        shift, and go to state 85
    '>'        shift, and go to state 86
    '+'        shift, and go to state 87
    '-'        shift, and go to state 88
    '*'        shift, and go to state 89
    '/'        shift, and go to state 90
    '%'        shift, and go to state 91


State 187

   88 compound_stmt: '{' scope_marker block '}' .

    $default  reduce using rule 88 (compound_stmt)


State 188

  103 while_stmt: WHILE '(' expr ')' loop_body .

    $default  reduce using rule 103 (while_stmt)


State 189

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  104 do_stmt: DO loop_body WHILE '(' expr . ')' SEMICOLON

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 194


State 190

   98 if_stmt: IF '(' expr ')' stmt .
   99        | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 195

    ELSE      [reduce using rule 98 (if_stmt)]
    $default  reduce using rule 98 (if_stmt)


State 191

  108 for_stmt: FOR '(' expr_stmt SEMICOLON ')' . loop_body

    $default  reduce using rule 100 (start_loop)

    start_loop  go to state 155
    loop_body   go to state 196


State 192

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  107 for_stmt: FOR '(' expr_stmt SEMICOLON expr . ')' loop_body

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 197


State 193

  105 for_stmt: FOR '(' expr_stmt expr SEMICOLON . ')' loop_body
  106         | FOR '(' expr_stmt expr SEMICOLON . expr ')' loop_body

    ID                  shift, and go to state 44
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    ')'                 shift, and go to state 198

    expr               go to state 199
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57


State 194

  104 do_stmt: DO loop_body WHILE '(' expr ')' . SEMICOLON

    SEMICOLON  shift, and go to state 200


State 195

   99 if_stmt: IF '(' expr ')' stmt ELSE . stmt

    SEMICOLON           shift, and go to state 122
    ID                  shift, and go to state 44
    WHILE               shift, and go to state 123
    DO                  shift, and go to state 124
    IF                  shift, and go to state 125
    TRUE                shift, and go to state 45
    FALSE               shift, and go to state 46
    FOR                 shift, and go to state 126
    READ                shift, and go to state 127
    CONTINUE            shift, and go to state 128
    BREAK               shift, and go to state 129
    RETURN              shift, and go to state 130
    PRINT               shift, and go to state 131
    STRING_LITERAL      shift, and go to state 47
    FLOAT_LITERAL       shift, and go to state 48
    SCIENTIFIC_LITERAL  shift, and go to state 49
    INT_LITERAL         shift, and go to state 50
    '!'                 shift, and go to state 51
    '-'                 shift, and go to state 52
    '('                 shift, and go to state 53
    '{'                 shift, and go to state 132

    expr               go to state 134
    func_invoke        go to state 55
    scaler_assignment  go to state 56
    scaler_literal     go to state 57
    stmt               go to state 201
    expr_stmt          go to state 139
    compound_stmt      go to state 140
    simple_stmt        go to state 143
    if_stmt            go to state 144
    while_stmt         go to state 145
    do_stmt            go to state 146
    for_stmt           go to state 147
    return_stmt        go to state 148
    jump_stmt          go to state 149


State 196

  108 for_stmt: FOR '(' expr_stmt SEMICOLON ')' loop_body .

    $default  reduce using rule 108 (for_stmt)


State 197

  107 for_stmt: FOR '(' expr_stmt SEMICOLON expr ')' . loop_body

    $default  reduce using rule 100 (start_loop)

    start_loop  go to state 155
    loop_body   go to state 202


State 198

  105 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' . loop_body

    $default  reduce using rule 100 (start_loop)

    start_loop  go to state 155
    loop_body   go to state 203


State 199

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  106 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr . ')' loop_body

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    EQ   shift, and go to state 81
    NEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    LEQ  shift, and go to state 84
    '<'  shift, and go to state 85
    '>'  shift, and go to state 86
    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 204


State 200

  104 do_stmt: DO loop_body WHILE '(' expr ')' SEMICOLON .

    $default  reduce using rule 104 (do_stmt)


State 201

   99 if_stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 99 (if_stmt)


State 202

  107 for_stmt: FOR '(' expr_stmt SEMICOLON expr ')' loop_body .

    $default  reduce using rule 107 (for_stmt)


State 203

  105 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' loop_body .

    $default  reduce using rule 105 (for_stmt)


State 204

  106 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr ')' . loop_body

    $default  reduce using rule 100 (start_loop)

    start_loop  go to state 155
    loop_body   go to state 205


State 205

  106 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr ')' loop_body .

    $default  reduce using rule 106 (for_stmt)
