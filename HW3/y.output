State 0 conflicts: 7 shift/reduce
State 14 conflicts: 7 shift/reduce, 7 reduce/reduce
State 20 conflicts: 7 shift/reduce, 8 reduce/reduce
State 60 conflicts: 13 shift/reduce
State 89 conflicts: 18 reduce/reduce
State 90 conflicts: 18 reduce/reduce
State 91 conflicts: 18 reduce/reduce
State 146 conflicts: 13 shift/reduce
State 203 conflicts: 1 shift/reduce
State 226 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_and_def_list func_def decl_and_def_list
    2        | func_def decl_and_def_list
    3        | decl_and_def_list func_def

    4 decl_and_def_list: decl_and_def_list declaration
    5                  | decl_and_def_list func_def
    6                  | declaration
    7                  | func_def
    8                  | %empty

    9 declaration: const_decl
   10            | var_decl
   11            | func_decl

   12 expr: expr OR expr
   13     | expr AND expr
   14     | expr EQ expr
   15     | expr NEQ expr
   16     | expr GEQ expr
   17     | expr LEQ expr
   18     | expr '>' expr
   19     | expr '<' expr
   20     | expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '%' expr
   25     | '(' expr ')'
   26     | '-' expr
   27     | '!' expr
   28     | ID
   29     | scaler_literal
   30     | func_invoke
   31     | array_ref
   32     | array_ref_assignment
   33     | scaler_assignment

   34 array_ref: array_ref '[' expr ']'
   35          | ID '[' expr ']'

   36 array_ref_assignment: array_ref '=' expr

   37 func_invoke: ID '(' param_list ')'
   38            | ID '(' ')'

   39 param_list: param_list ',' expr
   40           | param_list ',' array_identifier
   41           | expr
   42           | array_identifier

   43 var_decl: type identifier_list SEMICOLON

   44 identifier_list: identifier_list ',' ID
   45                | identifier_list ',' scaler_assignment
   46                | identifier_list ',' array_assignment
   47                | scaler_assignment
   48                | array_assignment
   49                | ID

   50 scaler_assignment: ID '=' expr

   51 scaler_literal: STRING_LITERAL
   52               | FLOAT_LITERAL
   53               | INT_LITERAL
   54               | SCIENTIFIC_LITERAL
   55               | '-' FLOAT_LITERAL
   56               | '-' INT_LITERAL
   57               | '-' SCIENTIFIC_LITERAL
   58               | TRUE
   59               | FALSE

   60 array_assignment: array_identifier '=' array_literal

   61 array_literal: '{' element_list '}'
   62              | '{' '}'

   63 element_list: element_list ',' expr
   64             | expr

   65 const_decl: CONST type const_list SEMICOLON

   66 const_list: const_list ',' ID '=' scaler_literal
   67           | ID '=' scaler_literal

   68 func_decl: type ID '(' arg_list ')' SEMICOLON
   69          | type ID '(' ')' SEMICOLON
   70          | VOID ID '(' arg_list ')' SEMICOLON
   71          | VOID ID '(' ')' SEMICOLON

   72 arg_list: arg_list ',' argument
   73         | argument

   74 argument: type identifier

   75 $@1: %empty

   76 func_def: type ID '(' arg_list ')' $@1 func_body

   77 $@2: %empty

   78 func_def: type ID '(' ')' $@2 func_body

   79 $@3: %empty

   80 func_def: VOID ID '(' arg_list ')' $@3 func_body

   81 $@4: %empty

   82 func_def: VOID ID '(' ')' $@4 func_body

   83 type: INT
   84     | BOOL
   85     | FLOAT
   86     | DOUBLE
   87     | STRING

   88 identifier: ID
   89           | array_identifier

   90 array_identifier: ID '[' INT_LITERAL ']'
   91                 | array_identifier '[' INT_LITERAL ']'

   92 stmt: compound_stmt
   93     | simple_stmt
   94     | if_stmt
   95     | while_stmt
   96     | do_stmt
   97     | for_stmt
   98     | jump_stmt
   99     | return_stmt
  100     | expr_stmt

  101 expr_stmt: expr SEMICOLON
  102          | SEMICOLON

  103 func_body: '{' block '}'
  104          | '{' '}'

  105 compound_stmt: '{' scope_marker block '}'
  106              | '{' scope_marker '}'

  107 scope_marker: %empty

  108 block: block block_element
  109      | block_element

  110 block_element: var_decl
  111              | const_decl
  112              | stmt

  113 simple_stmt: PRINT expr SEMICOLON
  114            | READ ID SEMICOLON
  115            | READ array_ref SEMICOLON

  116 if_stmt: IF '(' expr ')' stmt
  117        | IF '(' expr ')' stmt ELSE stmt

  118 start_loop: %empty

  119 end_loop: %empty

  120 loop_body: start_loop stmt end_loop

  121 while_stmt: WHILE '(' expr ')' loop_body

  122 do_stmt: DO loop_body WHILE '(' expr ')' SEMICOLON

  123 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' loop_body
  124         | FOR '(' expr_stmt expr SEMICOLON expr ')' loop_body
  125         | FOR '(' expr_stmt SEMICOLON expr ')' loop_body
  126         | FOR '(' expr_stmt SEMICOLON ')' loop_body

  127 return_stmt: RETURN expr SEMICOLON
  128            | RETURN SEMICOLON

  129 jump_stmt: BREAK SEMICOLON
  130          | CONTINUE SEMICOLON


Terminals, with rules where they appear

$end (0) 0
'!' (33) 27
'%' (37) 24
'(' (40) 25 37 38 68 69 70 71 76 78 80 82 116 117 121 122 123 124 125
    126
')' (41) 25 37 38 68 69 70 71 76 78 80 82 116 117 121 122 123 124 125
    126
'*' (42) 22
'+' (43) 20
',' (44) 39 40 44 45 46 63 66 72
'-' (45) 21 26 55 56 57
'/' (47) 23
'<' (60) 19
'=' (61) 36 50 60 66 67
'>' (62) 18
'[' (91) 34 35 90 91
']' (93) 34 35 90 91
'{' (123) 61 62 103 104 105 106
'}' (125) 61 62 103 104 105 106
error (256)
SEMICOLON (258) 43 65 68 69 70 71 101 102 113 114 115 122 123 124 125
    126 127 128 129 130
ID (259) 28 35 37 38 44 49 50 66 67 68 69 70 71 76 78 80 82 88 90 114
WHILE (260) 121 122
DO (261) 122
IF (262) 116 117
ELSE (263) 117
TRUE (264) 58
FALSE (265) 59
FOR (266) 123 124 125 126
CONST (267) 65
READ (268) 114 115
CONTINUE (269) 130
BREAK (270) 129
RETURN (271) 127 128
PRINT (272) 113
STRING_LITERAL (273) 51
FLOAT_LITERAL (274) 52 55
SCIENTIFIC_LITERAL (275) 54 57
INT_LITERAL (276) 53 56 90 91
OR (277) 12
AND (278) 13
EQ (279) 14
NEQ (280) 15
GEQ (281) 16
LEQ (282) 17
INT (283) 83
BOOL (284) 84
VOID (285) 70 71 80 82
FLOAT (286) 85
DOUBLE (287) 86
STRING (288) 87


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1 2 3, on right: 0
decl_and_def_list (52)
    on left: 4 5 6 7 8, on right: 1 2 3 4 5
declaration (53)
    on left: 9 10 11, on right: 4 6
expr (54)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    30 31 32 33, on right: 12 13 14 15 16 17 18 19 20 21 22 23 24 25
    26 27 34 35 36 39 41 50 63 64 101 113 116 117 121 122 123 124 125
    127
array_ref (55)
    on left: 34 35, on right: 31 34 36 115
array_ref_assignment (56)
    on left: 36, on right: 32
func_invoke (57)
    on left: 37 38, on right: 30
param_list (58)
    on left: 39 40 41 42, on right: 37 39 40
var_decl (59)
    on left: 43, on right: 10 110
identifier_list (60)
    on left: 44 45 46 47 48 49, on right: 43 44 45 46
scaler_assignment (61)
    on left: 50, on right: 33 45 47
scaler_literal (62)
    on left: 51 52 53 54 55 56 57 58 59, on right: 29 66 67
array_assignment (63)
    on left: 60, on right: 46 48
array_literal (64)
    on left: 61 62, on right: 60
element_list (65)
    on left: 63 64, on right: 61 63
const_decl (66)
    on left: 65, on right: 9 111
const_list (67)
    on left: 66 67, on right: 65 66
func_decl (68)
    on left: 68 69 70 71, on right: 11
arg_list (69)
    on left: 72 73, on right: 68 70 72 76 80
argument (70)
    on left: 74, on right: 72 73
func_def (71)
    on left: 76 78 80 82, on right: 1 2 3 5 7
$@1 (72)
    on left: 75, on right: 76
$@2 (73)
    on left: 77, on right: 78
$@3 (74)
    on left: 79, on right: 80
$@4 (75)
    on left: 81, on right: 82
type (76)
    on left: 83 84 85 86 87, on right: 43 65 68 69 74 76 78
identifier (77)
    on left: 88 89, on right: 74
array_identifier (78)
    on left: 90 91, on right: 40 42 60 89 91
stmt (79)
    on left: 92 93 94 95 96 97 98 99 100, on right: 112 116 117 120
expr_stmt (80)
    on left: 101 102, on right: 100 123 124 125 126
func_body (81)
    on left: 103 104, on right: 76 78 80 82
compound_stmt (82)
    on left: 105 106, on right: 92
scope_marker (83)
    on left: 107, on right: 105 106
block (84)
    on left: 108 109, on right: 103 105 108
block_element (85)
    on left: 110 111 112, on right: 108 109
simple_stmt (86)
    on left: 113 114 115, on right: 93
if_stmt (87)
    on left: 116 117, on right: 94
start_loop (88)
    on left: 118, on right: 120
end_loop (89)
    on left: 119, on right: 120
loop_body (90)
    on left: 120, on right: 121 122 123 124 125 126
while_stmt (91)
    on left: 121, on right: 95
do_stmt (92)
    on left: 122, on right: 96
for_stmt (93)
    on left: 123 124 125 126, on right: 97
return_stmt (94)
    on left: 127 128, on right: 99
jump_stmt (95)
    on left: 129 130, on right: 98


State 0

    0 $accept: . program $end

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    CONST   [reduce using rule 8 (decl_and_def_list)]
    INT     [reduce using rule 8 (decl_and_def_list)]
    BOOL    [reduce using rule 8 (decl_and_def_list)]
    VOID    [reduce using rule 8 (decl_and_def_list)]
    FLOAT   [reduce using rule 8 (decl_and_def_list)]
    DOUBLE  [reduce using rule 8 (decl_and_def_list)]
    STRING  [reduce using rule 8 (decl_and_def_list)]

    program            go to state 8
    decl_and_def_list  go to state 9
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 14
    type               go to state 15


State 1

   65 const_decl: CONST . type const_list SEMICOLON

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 16


State 2

   83 type: INT .

    $default  reduce using rule 83 (type)


State 3

   84 type: BOOL .

    $default  reduce using rule 84 (type)


State 4

   70 func_decl: VOID . ID '(' arg_list ')' SEMICOLON
   71          | VOID . ID '(' ')' SEMICOLON
   80 func_def: VOID . ID '(' arg_list ')' $@3 func_body
   82         | VOID . ID '(' ')' $@4 func_body

    ID  shift, and go to state 17


State 5

   85 type: FLOAT .

    $default  reduce using rule 85 (type)


State 6

   86 type: DOUBLE .

    $default  reduce using rule 86 (type)


State 7

   87 type: STRING .

    $default  reduce using rule 87 (type)


State 8

    0 $accept: program . $end

    $end  shift, and go to state 18


State 9

    1 program: decl_and_def_list . func_def decl_and_def_list
    3        | decl_and_def_list . func_def
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 20
    type         go to state 15


State 10

    6 decl_and_def_list: declaration .

    $default  reduce using rule 6 (decl_and_def_list)


State 11

   10 declaration: var_decl .

    $default  reduce using rule 10 (declaration)


State 12

    9 declaration: const_decl .

    $default  reduce using rule 9 (declaration)


State 13

   11 declaration: func_decl .

    $default  reduce using rule 11 (declaration)


State 14

    2 program: func_def . decl_and_def_list
    7 decl_and_def_list: func_def .

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    CONST     [reduce using rule 7 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    INT       [reduce using rule 7 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 7 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 7 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 7 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 7 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 7 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 8 (decl_and_def_list)

    decl_and_def_list  go to state 21
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 15

   43 var_decl: type . identifier_list SEMICOLON
   68 func_decl: type . ID '(' arg_list ')' SEMICOLON
   69          | type . ID '(' ')' SEMICOLON
   76 func_def: type . ID '(' arg_list ')' $@1 func_body
   78         | type . ID '(' ')' $@2 func_body

    ID  shift, and go to state 23

    identifier_list    go to state 24
    scaler_assignment  go to state 25
    array_assignment   go to state 26
    array_identifier   go to state 27


State 16

   65 const_decl: CONST type . const_list SEMICOLON

    ID  shift, and go to state 28

    const_list  go to state 29


State 17

   70 func_decl: VOID ID . '(' arg_list ')' SEMICOLON
   71          | VOID ID . '(' ')' SEMICOLON
   80 func_def: VOID ID . '(' arg_list ')' $@3 func_body
   82         | VOID ID . '(' ')' $@4 func_body

    '('  shift, and go to state 30


State 18

    0 $accept: program $end .

    $default  accept


State 19

    4 decl_and_def_list: decl_and_def_list declaration .

    $default  reduce using rule 4 (decl_and_def_list)


State 20

    1 program: decl_and_def_list func_def . decl_and_def_list
    3        | decl_and_def_list func_def .
    5 decl_and_def_list: decl_and_def_list func_def .

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $end      reduce using rule 3 (program)
    $end      [reduce using rule 8 (decl_and_def_list)]
    CONST     [reduce using rule 5 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    INT       [reduce using rule 5 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 5 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 5 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 5 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 5 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 5 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 3 (program)

    decl_and_def_list  go to state 31
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 21

    2 program: func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 2 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 32
    type         go to state 15


State 22

    7 decl_and_def_list: func_def .

    $default  reduce using rule 7 (decl_and_def_list)


State 23

   49 identifier_list: ID .
   50 scaler_assignment: ID . '=' expr
   68 func_decl: type ID . '(' arg_list ')' SEMICOLON
   69          | type ID . '(' ')' SEMICOLON
   76 func_def: type ID . '(' arg_list ')' $@1 func_body
   78         | type ID . '(' ')' $@2 func_body
   90 array_identifier: ID . '[' INT_LITERAL ']'

    '('  shift, and go to state 33
    '['  shift, and go to state 34
    '='  shift, and go to state 35

    $default  reduce using rule 49 (identifier_list)


State 24

   43 var_decl: type identifier_list . SEMICOLON
   44 identifier_list: identifier_list . ',' ID
   45                | identifier_list . ',' scaler_assignment
   46                | identifier_list . ',' array_assignment

    SEMICOLON  shift, and go to state 36
    ','        shift, and go to state 37


State 25

   47 identifier_list: scaler_assignment .

    $default  reduce using rule 47 (identifier_list)


State 26

   48 identifier_list: array_assignment .

    $default  reduce using rule 48 (identifier_list)


State 27

   60 array_assignment: array_identifier . '=' array_literal
   91 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38
    '='  shift, and go to state 39


State 28

   67 const_list: ID . '=' scaler_literal

    '='  shift, and go to state 40


State 29

   65 const_decl: CONST type const_list . SEMICOLON
   66 const_list: const_list . ',' ID '=' scaler_literal

    SEMICOLON  shift, and go to state 41
    ','        shift, and go to state 42


State 30

   70 func_decl: VOID ID '(' . arg_list ')' SEMICOLON
   71          | VOID ID '(' . ')' SEMICOLON
   80 func_def: VOID ID '(' . arg_list ')' $@3 func_body
   82         | VOID ID '(' . ')' $@4 func_body

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 43

    arg_list  go to state 44
    argument  go to state 45
    type      go to state 46


State 31

    1 program: decl_and_def_list func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 1 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 32
    type         go to state 15


State 32

    5 decl_and_def_list: decl_and_def_list func_def .

    $default  reduce using rule 5 (decl_and_def_list)


State 33

   68 func_decl: type ID '(' . arg_list ')' SEMICOLON
   69          | type ID '(' . ')' SEMICOLON
   76 func_def: type ID '(' . arg_list ')' $@1 func_body
   78         | type ID '(' . ')' $@2 func_body

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 47

    arg_list  go to state 48
    argument  go to state 45
    type      go to state 46


State 34

   90 array_identifier: ID '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 49


State 35

   50 scaler_assignment: ID '=' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 60
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 36

   43 var_decl: type identifier_list SEMICOLON .

    $default  reduce using rule 43 (var_decl)


State 37

   44 identifier_list: identifier_list ',' . ID
   45                | identifier_list ',' . scaler_assignment
   46                | identifier_list ',' . array_assignment

    ID  shift, and go to state 66

    scaler_assignment  go to state 67
    array_assignment   go to state 68
    array_identifier   go to state 27


State 38

   91 array_identifier: array_identifier '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 69


State 39

   60 array_assignment: array_identifier '=' . array_literal

    '{'  shift, and go to state 70

    array_literal  go to state 71


State 40

   67 const_list: ID '=' . scaler_literal

    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '-'                 shift, and go to state 72

    scaler_literal  go to state 73


State 41

   65 const_decl: CONST type const_list SEMICOLON .

    $default  reduce using rule 65 (const_decl)


State 42

   66 const_list: const_list ',' . ID '=' scaler_literal

    ID  shift, and go to state 74


State 43

   71 func_decl: VOID ID '(' ')' . SEMICOLON
   82 func_def: VOID ID '(' ')' . $@4 func_body

    SEMICOLON  shift, and go to state 75

    $default  reduce using rule 81 ($@4)

    $@4  go to state 76


State 44

   70 func_decl: VOID ID '(' arg_list . ')' SEMICOLON
   72 arg_list: arg_list . ',' argument
   80 func_def: VOID ID '(' arg_list . ')' $@3 func_body

    ')'  shift, and go to state 77
    ','  shift, and go to state 78


State 45

   73 arg_list: argument .

    $default  reduce using rule 73 (arg_list)


State 46

   74 argument: type . identifier

    ID  shift, and go to state 79

    identifier        go to state 80
    array_identifier  go to state 81


State 47

   69 func_decl: type ID '(' ')' . SEMICOLON
   78 func_def: type ID '(' ')' . $@2 func_body

    SEMICOLON  shift, and go to state 82

    $default  reduce using rule 77 ($@2)

    $@2  go to state 83


State 48

   68 func_decl: type ID '(' arg_list . ')' SEMICOLON
   72 arg_list: arg_list . ',' argument
   76 func_def: type ID '(' arg_list . ')' $@1 func_body

    ')'  shift, and go to state 84
    ','  shift, and go to state 78


State 49

   90 array_identifier: ID '[' INT_LITERAL . ']'

    ']'  shift, and go to state 85


State 50

   28 expr: ID .
   35 array_ref: ID . '[' expr ']'
   37 func_invoke: ID . '(' param_list ')'
   38            | ID . '(' ')'
   50 scaler_assignment: ID . '=' expr

    '('  shift, and go to state 86
    '['  shift, and go to state 87
    '='  shift, and go to state 35

    $default  reduce using rule 28 (expr)


State 51

   58 scaler_literal: TRUE .

    $default  reduce using rule 58 (scaler_literal)


State 52

   59 scaler_literal: FALSE .

    $default  reduce using rule 59 (scaler_literal)


State 53

   51 scaler_literal: STRING_LITERAL .

    $default  reduce using rule 51 (scaler_literal)


State 54

   52 scaler_literal: FLOAT_LITERAL .

    $default  reduce using rule 52 (scaler_literal)


State 55

   54 scaler_literal: SCIENTIFIC_LITERAL .

    $default  reduce using rule 54 (scaler_literal)


State 56

   53 scaler_literal: INT_LITERAL .

    $default  reduce using rule 53 (scaler_literal)


State 57

   27 expr: '!' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 88
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 58

   26 expr: '-' . expr
   55 scaler_literal: '-' . FLOAT_LITERAL
   56               | '-' . INT_LITERAL
   57               | '-' . SCIENTIFIC_LITERAL

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 89
    SCIENTIFIC_LITERAL  shift, and go to state 90
    INT_LITERAL         shift, and go to state 91
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 92
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 59

   25 expr: '(' . expr ')'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 93
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 60

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   50 scaler_assignment: ID '=' expr .

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    OR        [reduce using rule 50 (scaler_assignment)]
    AND       [reduce using rule 50 (scaler_assignment)]
    EQ        [reduce using rule 50 (scaler_assignment)]
    NEQ       [reduce using rule 50 (scaler_assignment)]
    GEQ       [reduce using rule 50 (scaler_assignment)]
    LEQ       [reduce using rule 50 (scaler_assignment)]
    '<'       [reduce using rule 50 (scaler_assignment)]
    '>'       [reduce using rule 50 (scaler_assignment)]
    '+'       [reduce using rule 50 (scaler_assignment)]
    '-'       [reduce using rule 50 (scaler_assignment)]
    '*'       [reduce using rule 50 (scaler_assignment)]
    '/'       [reduce using rule 50 (scaler_assignment)]
    '%'       [reduce using rule 50 (scaler_assignment)]
    $default  reduce using rule 50 (scaler_assignment)


State 61

   31 expr: array_ref .
   34 array_ref: array_ref . '[' expr ']'
   36 array_ref_assignment: array_ref . '=' expr

    '['  shift, and go to state 107
    '='  shift, and go to state 108

    $default  reduce using rule 31 (expr)


State 62

   32 expr: array_ref_assignment .

    $default  reduce using rule 32 (expr)


State 63

   30 expr: func_invoke .

    $default  reduce using rule 30 (expr)


State 64

   33 expr: scaler_assignment .

    $default  reduce using rule 33 (expr)


State 65

   29 expr: scaler_literal .

    $default  reduce using rule 29 (expr)


State 66

   44 identifier_list: identifier_list ',' ID .
   50 scaler_assignment: ID . '=' expr
   90 array_identifier: ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 34
    '='  shift, and go to state 35

    $default  reduce using rule 44 (identifier_list)


State 67

   45 identifier_list: identifier_list ',' scaler_assignment .

    $default  reduce using rule 45 (identifier_list)


State 68

   46 identifier_list: identifier_list ',' array_assignment .

    $default  reduce using rule 46 (identifier_list)


State 69

   91 array_identifier: array_identifier '[' INT_LITERAL . ']'

    ']'  shift, and go to state 109


State 70

   61 array_literal: '{' . element_list '}'
   62              | '{' . '}'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '}'                 shift, and go to state 110

    expr                  go to state 111
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    element_list          go to state 112


State 71

   60 array_assignment: array_identifier '=' array_literal .

    $default  reduce using rule 60 (array_assignment)


State 72

   55 scaler_literal: '-' . FLOAT_LITERAL
   56               | '-' . INT_LITERAL
   57               | '-' . SCIENTIFIC_LITERAL

    FLOAT_LITERAL       shift, and go to state 113
    SCIENTIFIC_LITERAL  shift, and go to state 114
    INT_LITERAL         shift, and go to state 115


State 73

   67 const_list: ID '=' scaler_literal .

    $default  reduce using rule 67 (const_list)


State 74

   66 const_list: const_list ',' ID . '=' scaler_literal

    '='  shift, and go to state 116


State 75

   71 func_decl: VOID ID '(' ')' SEMICOLON .

    $default  reduce using rule 71 (func_decl)


State 76

   82 func_def: VOID ID '(' ')' $@4 . func_body

    '{'  shift, and go to state 117

    func_body  go to state 118


State 77

   70 func_decl: VOID ID '(' arg_list ')' . SEMICOLON
   80 func_def: VOID ID '(' arg_list ')' . $@3 func_body

    SEMICOLON  shift, and go to state 119

    $default  reduce using rule 79 ($@3)

    $@3  go to state 120


State 78

   72 arg_list: arg_list ',' . argument

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    argument  go to state 121
    type      go to state 46


State 79

   88 identifier: ID .
   90 array_identifier: ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 34

    $default  reduce using rule 88 (identifier)


State 80

   74 argument: type identifier .

    $default  reduce using rule 74 (argument)


State 81

   89 identifier: array_identifier .
   91 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38

    $default  reduce using rule 89 (identifier)


State 82

   69 func_decl: type ID '(' ')' SEMICOLON .

    $default  reduce using rule 69 (func_decl)


State 83

   78 func_def: type ID '(' ')' $@2 . func_body

    '{'  shift, and go to state 117

    func_body  go to state 122


State 84

   68 func_decl: type ID '(' arg_list ')' . SEMICOLON
   76 func_def: type ID '(' arg_list ')' . $@1 func_body

    SEMICOLON  shift, and go to state 123

    $default  reduce using rule 75 ($@1)

    $@1  go to state 124


State 85

   90 array_identifier: ID '[' INT_LITERAL ']' .

    $default  reduce using rule 90 (array_identifier)


State 86

   37 func_invoke: ID '(' . param_list ')'
   38            | ID '(' . ')'

    ID                  shift, and go to state 125
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 126

    expr                  go to state 127
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    param_list            go to state 128
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    array_identifier      go to state 129


State 87

   35 array_ref: ID '[' . expr ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 130
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 88

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   27     | '!' expr .

    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 27 (expr)


State 89

   52 scaler_literal: FLOAT_LITERAL .
   55               | '-' FLOAT_LITERAL .

    SEMICOLON  reduce using rule 52 (scaler_literal)
    SEMICOLON  [reduce using rule 55 (scaler_literal)]
    OR         reduce using rule 52 (scaler_literal)
    OR         [reduce using rule 55 (scaler_literal)]
    AND        reduce using rule 52 (scaler_literal)
    AND        [reduce using rule 55 (scaler_literal)]
    EQ         reduce using rule 52 (scaler_literal)
    EQ         [reduce using rule 55 (scaler_literal)]
    NEQ        reduce using rule 52 (scaler_literal)
    NEQ        [reduce using rule 55 (scaler_literal)]
    GEQ        reduce using rule 52 (scaler_literal)
    GEQ        [reduce using rule 55 (scaler_literal)]
    LEQ        reduce using rule 52 (scaler_literal)
    LEQ        [reduce using rule 55 (scaler_literal)]
    '<'        reduce using rule 52 (scaler_literal)
    '<'        [reduce using rule 55 (scaler_literal)]
    '>'        reduce using rule 52 (scaler_literal)
    '>'        [reduce using rule 55 (scaler_literal)]
    '+'        reduce using rule 52 (scaler_literal)
    '+'        [reduce using rule 55 (scaler_literal)]
    '-'        reduce using rule 52 (scaler_literal)
    '-'        [reduce using rule 55 (scaler_literal)]
    '*'        reduce using rule 52 (scaler_literal)
    '*'        [reduce using rule 55 (scaler_literal)]
    '/'        reduce using rule 52 (scaler_literal)
    '/'        [reduce using rule 55 (scaler_literal)]
    '%'        reduce using rule 52 (scaler_literal)
    '%'        [reduce using rule 55 (scaler_literal)]
    ')'        reduce using rule 52 (scaler_literal)
    ')'        [reduce using rule 55 (scaler_literal)]
    ']'        reduce using rule 52 (scaler_literal)
    ']'        [reduce using rule 55 (scaler_literal)]
    ','        reduce using rule 52 (scaler_literal)
    ','        [reduce using rule 55 (scaler_literal)]
    '}'        reduce using rule 52 (scaler_literal)
    '}'        [reduce using rule 55 (scaler_literal)]
    $default   reduce using rule 52 (scaler_literal)


State 90

   54 scaler_literal: SCIENTIFIC_LITERAL .
   57               | '-' SCIENTIFIC_LITERAL .

    SEMICOLON  reduce using rule 54 (scaler_literal)
    SEMICOLON  [reduce using rule 57 (scaler_literal)]
    OR         reduce using rule 54 (scaler_literal)
    OR         [reduce using rule 57 (scaler_literal)]
    AND        reduce using rule 54 (scaler_literal)
    AND        [reduce using rule 57 (scaler_literal)]
    EQ         reduce using rule 54 (scaler_literal)
    EQ         [reduce using rule 57 (scaler_literal)]
    NEQ        reduce using rule 54 (scaler_literal)
    NEQ        [reduce using rule 57 (scaler_literal)]
    GEQ        reduce using rule 54 (scaler_literal)
    GEQ        [reduce using rule 57 (scaler_literal)]
    LEQ        reduce using rule 54 (scaler_literal)
    LEQ        [reduce using rule 57 (scaler_literal)]
    '<'        reduce using rule 54 (scaler_literal)
    '<'        [reduce using rule 57 (scaler_literal)]
    '>'        reduce using rule 54 (scaler_literal)
    '>'        [reduce using rule 57 (scaler_literal)]
    '+'        reduce using rule 54 (scaler_literal)
    '+'        [reduce using rule 57 (scaler_literal)]
    '-'        reduce using rule 54 (scaler_literal)
    '-'        [reduce using rule 57 (scaler_literal)]
    '*'        reduce using rule 54 (scaler_literal)
    '*'        [reduce using rule 57 (scaler_literal)]
    '/'        reduce using rule 54 (scaler_literal)
    '/'        [reduce using rule 57 (scaler_literal)]
    '%'        reduce using rule 54 (scaler_literal)
    '%'        [reduce using rule 57 (scaler_literal)]
    ')'        reduce using rule 54 (scaler_literal)
    ')'        [reduce using rule 57 (scaler_literal)]
    ']'        reduce using rule 54 (scaler_literal)
    ']'        [reduce using rule 57 (scaler_literal)]
    ','        reduce using rule 54 (scaler_literal)
    ','        [reduce using rule 57 (scaler_literal)]
    '}'        reduce using rule 54 (scaler_literal)
    '}'        [reduce using rule 57 (scaler_literal)]
    $default   reduce using rule 54 (scaler_literal)


State 91

   53 scaler_literal: INT_LITERAL .
   56               | '-' INT_LITERAL .

    SEMICOLON  reduce using rule 53 (scaler_literal)
    SEMICOLON  [reduce using rule 56 (scaler_literal)]
    OR         reduce using rule 53 (scaler_literal)
    OR         [reduce using rule 56 (scaler_literal)]
    AND        reduce using rule 53 (scaler_literal)
    AND        [reduce using rule 56 (scaler_literal)]
    EQ         reduce using rule 53 (scaler_literal)
    EQ         [reduce using rule 56 (scaler_literal)]
    NEQ        reduce using rule 53 (scaler_literal)
    NEQ        [reduce using rule 56 (scaler_literal)]
    GEQ        reduce using rule 53 (scaler_literal)
    GEQ        [reduce using rule 56 (scaler_literal)]
    LEQ        reduce using rule 53 (scaler_literal)
    LEQ        [reduce using rule 56 (scaler_literal)]
    '<'        reduce using rule 53 (scaler_literal)
    '<'        [reduce using rule 56 (scaler_literal)]
    '>'        reduce using rule 53 (scaler_literal)
    '>'        [reduce using rule 56 (scaler_literal)]
    '+'        reduce using rule 53 (scaler_literal)
    '+'        [reduce using rule 56 (scaler_literal)]
    '-'        reduce using rule 53 (scaler_literal)
    '-'        [reduce using rule 56 (scaler_literal)]
    '*'        reduce using rule 53 (scaler_literal)
    '*'        [reduce using rule 56 (scaler_literal)]
    '/'        reduce using rule 53 (scaler_literal)
    '/'        [reduce using rule 56 (scaler_literal)]
    '%'        reduce using rule 53 (scaler_literal)
    '%'        [reduce using rule 56 (scaler_literal)]
    ')'        reduce using rule 53 (scaler_literal)
    ')'        [reduce using rule 56 (scaler_literal)]
    ']'        reduce using rule 53 (scaler_literal)
    ']'        [reduce using rule 56 (scaler_literal)]
    ','        reduce using rule 53 (scaler_literal)
    ','        [reduce using rule 56 (scaler_literal)]
    '}'        reduce using rule 53 (scaler_literal)
    '}'        [reduce using rule 56 (scaler_literal)]
    $default   reduce using rule 53 (scaler_literal)


State 92

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   26     | '-' expr .

    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 26 (expr)


State 93

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   25     | '(' expr . ')'

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ')'  shift, and go to state 131


State 94

   12 expr: expr OR . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 132
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 95

   13 expr: expr AND . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 133
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 96

   14 expr: expr EQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 134
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 97

   15 expr: expr NEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 135
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 98

   16 expr: expr GEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 136
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 99

   17 expr: expr LEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 137
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 100

   19 expr: expr '<' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 138
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 101

   18 expr: expr '>' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 139
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 102

   20 expr: expr '+' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 140
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 103

   21 expr: expr '-' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 141
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 104

   22 expr: expr '*' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 142
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 105

   23 expr: expr '/' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 143
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 106

   24 expr: expr '%' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 144
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 107

   34 array_ref: array_ref '[' . expr ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 145
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 108

   36 array_ref_assignment: array_ref '=' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 146
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 109

   91 array_identifier: array_identifier '[' INT_LITERAL ']' .

    $default  reduce using rule 91 (array_identifier)


State 110

   62 array_literal: '{' '}' .

    $default  reduce using rule 62 (array_literal)


State 111

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   64 element_list: expr .

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 64 (element_list)


State 112

   61 array_literal: '{' element_list . '}'
   63 element_list: element_list . ',' expr

    ','  shift, and go to state 147
    '}'  shift, and go to state 148


State 113

   55 scaler_literal: '-' FLOAT_LITERAL .

    $default  reduce using rule 55 (scaler_literal)


State 114

   57 scaler_literal: '-' SCIENTIFIC_LITERAL .

    $default  reduce using rule 57 (scaler_literal)


State 115

   56 scaler_literal: '-' INT_LITERAL .

    $default  reduce using rule 56 (scaler_literal)


State 116

   66 const_list: const_list ',' ID '=' . scaler_literal

    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '-'                 shift, and go to state 72

    scaler_literal  go to state 149


State 117

  103 func_body: '{' . block '}'
  104          | '{' . '}'

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 151
    DO                  shift, and go to state 152
    IF                  shift, and go to state 153
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 154
    CONST               shift, and go to state 1
    READ                shift, and go to state 155
    CONTINUE            shift, and go to state 156
    BREAK               shift, and go to state 157
    RETURN              shift, and go to state 158
    PRINT               shift, and go to state 159
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 160
    '}'                 shift, and go to state 161

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 163
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 164
    type                  go to state 165
    stmt                  go to state 166
    expr_stmt             go to state 167
    compound_stmt         go to state 168
    block                 go to state 169
    block_element         go to state 170
    simple_stmt           go to state 171
    if_stmt               go to state 172
    while_stmt            go to state 173
    do_stmt               go to state 174
    for_stmt              go to state 175
    return_stmt           go to state 176
    jump_stmt             go to state 177


State 118

   82 func_def: VOID ID '(' ')' $@4 func_body .

    $default  reduce using rule 82 (func_def)


State 119

   70 func_decl: VOID ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 70 (func_decl)


State 120

   80 func_def: VOID ID '(' arg_list ')' $@3 . func_body

    '{'  shift, and go to state 117

    func_body  go to state 178


State 121

   72 arg_list: arg_list ',' argument .

    $default  reduce using rule 72 (arg_list)


State 122

   78 func_def: type ID '(' ')' $@2 func_body .

    $default  reduce using rule 78 (func_def)


State 123

   68 func_decl: type ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 68 (func_decl)


State 124

   76 func_def: type ID '(' arg_list ')' $@1 . func_body

    '{'  shift, and go to state 117

    func_body  go to state 179


State 125

   28 expr: ID .
   35 array_ref: ID . '[' expr ']'
   37 func_invoke: ID . '(' param_list ')'
   38            | ID . '(' ')'
   50 scaler_assignment: ID . '=' expr
   90 array_identifier: ID . '[' INT_LITERAL ']'

    '('  shift, and go to state 86
    '['  shift, and go to state 180
    '='  shift, and go to state 35

    $default  reduce using rule 28 (expr)


State 126

   38 func_invoke: ID '(' ')' .

    $default  reduce using rule 38 (func_invoke)


State 127

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   41 param_list: expr .

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 41 (param_list)


State 128

   37 func_invoke: ID '(' param_list . ')'
   39 param_list: param_list . ',' expr
   40           | param_list . ',' array_identifier

    ')'  shift, and go to state 181
    ','  shift, and go to state 182


State 129

   42 param_list: array_identifier .
   91 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38

    $default  reduce using rule 42 (param_list)


State 130

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   35 array_ref: ID '[' expr . ']'

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ']'  shift, and go to state 183


State 131

   25 expr: '(' expr ')' .

    $default  reduce using rule 25 (expr)


State 132

   12 expr: expr . OR expr
   12     | expr OR expr .
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 12 (expr)


State 133

   12 expr: expr . OR expr
   13     | expr . AND expr
   13     | expr AND expr .
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 13 (expr)


State 134

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   14     | expr EQ expr .
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 14 (expr)


State 135

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   15     | expr NEQ expr .
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 15 (expr)


State 136

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   16     | expr GEQ expr .
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 16 (expr)


State 137

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   17     | expr LEQ expr .
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 17 (expr)


State 138

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   19     | expr '<' expr .
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 19 (expr)


State 139

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   18     | expr '>' expr .
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 18 (expr)


State 140

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   20     | expr '+' expr .
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 20 (expr)


State 141

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 21 (expr)


State 142

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '%' expr

    $default  reduce using rule 22 (expr)


State 143

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '%' expr

    $default  reduce using rule 23 (expr)


State 144

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   24     | expr '%' expr .

    $default  reduce using rule 24 (expr)


State 145

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   34 array_ref: array_ref '[' expr . ']'

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ']'  shift, and go to state 184


State 146

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   36 array_ref_assignment: array_ref '=' expr .

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    OR        [reduce using rule 36 (array_ref_assignment)]
    AND       [reduce using rule 36 (array_ref_assignment)]
    EQ        [reduce using rule 36 (array_ref_assignment)]
    NEQ       [reduce using rule 36 (array_ref_assignment)]
    GEQ       [reduce using rule 36 (array_ref_assignment)]
    LEQ       [reduce using rule 36 (array_ref_assignment)]
    '<'       [reduce using rule 36 (array_ref_assignment)]
    '>'       [reduce using rule 36 (array_ref_assignment)]
    '+'       [reduce using rule 36 (array_ref_assignment)]
    '-'       [reduce using rule 36 (array_ref_assignment)]
    '*'       [reduce using rule 36 (array_ref_assignment)]
    '/'       [reduce using rule 36 (array_ref_assignment)]
    '%'       [reduce using rule 36 (array_ref_assignment)]
    $default  reduce using rule 36 (array_ref_assignment)


State 147

   63 element_list: element_list ',' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 185
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 148

   61 array_literal: '{' element_list '}' .

    $default  reduce using rule 61 (array_literal)


State 149

   66 const_list: const_list ',' ID '=' scaler_literal .

    $default  reduce using rule 66 (const_list)


State 150

  102 expr_stmt: SEMICOLON .

    $default  reduce using rule 102 (expr_stmt)


State 151

  121 while_stmt: WHILE . '(' expr ')' loop_body

    '('  shift, and go to state 186


State 152

  122 do_stmt: DO . loop_body WHILE '(' expr ')' SEMICOLON

    $default  reduce using rule 118 (start_loop)

    start_loop  go to state 187
    loop_body   go to state 188


State 153

  116 if_stmt: IF . '(' expr ')' stmt
  117        | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 189


State 154

  123 for_stmt: FOR . '(' expr_stmt expr SEMICOLON ')' loop_body
  124         | FOR . '(' expr_stmt expr SEMICOLON expr ')' loop_body
  125         | FOR . '(' expr_stmt SEMICOLON expr ')' loop_body
  126         | FOR . '(' expr_stmt SEMICOLON ')' loop_body

    '('  shift, and go to state 190


State 155

  114 simple_stmt: READ . ID SEMICOLON
  115            | READ . array_ref SEMICOLON

    ID  shift, and go to state 191

    array_ref  go to state 192


State 156

  130 jump_stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 193


State 157

  129 jump_stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 194


State 158

  127 return_stmt: RETURN . expr SEMICOLON
  128            | RETURN . SEMICOLON

    SEMICOLON           shift, and go to state 195
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 196
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 159

  113 simple_stmt: PRINT . expr SEMICOLON

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 197
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 160

  105 compound_stmt: '{' . scope_marker block '}'
  106              | '{' . scope_marker '}'

    $default  reduce using rule 107 (scope_marker)

    scope_marker  go to state 198


State 161

  104 func_body: '{' '}' .

    $default  reduce using rule 104 (func_body)


State 162

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  101 expr_stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 199
    OR         shift, and go to state 94
    AND        shift, and go to state 95
    EQ         shift, and go to state 96
    NEQ        shift, and go to state 97
    GEQ        shift, and go to state 98
    LEQ        shift, and go to state 99
    '<'        shift, and go to state 100
    '>'        shift, and go to state 101
    '+'        shift, and go to state 102
    '-'        shift, and go to state 103
    '*'        shift, and go to state 104
    '/'        shift, and go to state 105
    '%'        shift, and go to state 106


State 163

  110 block_element: var_decl .

    $default  reduce using rule 110 (block_element)


State 164

  111 block_element: const_decl .

    $default  reduce using rule 111 (block_element)


State 165

   43 var_decl: type . identifier_list SEMICOLON

    ID  shift, and go to state 200

    identifier_list    go to state 24
    scaler_assignment  go to state 25
    array_assignment   go to state 26
    array_identifier   go to state 27


State 166

  112 block_element: stmt .

    $default  reduce using rule 112 (block_element)


State 167

  100 stmt: expr_stmt .

    $default  reduce using rule 100 (stmt)


State 168

   92 stmt: compound_stmt .

    $default  reduce using rule 92 (stmt)


State 169

  103 func_body: '{' block . '}'
  108 block: block . block_element

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 151
    DO                  shift, and go to state 152
    IF                  shift, and go to state 153
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 154
    CONST               shift, and go to state 1
    READ                shift, and go to state 155
    CONTINUE            shift, and go to state 156
    BREAK               shift, and go to state 157
    RETURN              shift, and go to state 158
    PRINT               shift, and go to state 159
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 160
    '}'                 shift, and go to state 201

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 163
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 164
    type                  go to state 165
    stmt                  go to state 166
    expr_stmt             go to state 167
    compound_stmt         go to state 168
    block_element         go to state 202
    simple_stmt           go to state 171
    if_stmt               go to state 172
    while_stmt            go to state 173
    do_stmt               go to state 174
    for_stmt              go to state 175
    return_stmt           go to state 176
    jump_stmt             go to state 177


State 170

  109 block: block_element .

    $default  reduce using rule 109 (block)


State 171

   93 stmt: simple_stmt .

    $default  reduce using rule 93 (stmt)


State 172

   94 stmt: if_stmt .

    $default  reduce using rule 94 (stmt)


State 173

   95 stmt: while_stmt .

    $default  reduce using rule 95 (stmt)


State 174

   96 stmt: do_stmt .

    $default  reduce using rule 96 (stmt)


State 175

   97 stmt: for_stmt .

    $default  reduce using rule 97 (stmt)


State 176

   99 stmt: return_stmt .

    $default  reduce using rule 99 (stmt)


State 177

   98 stmt: jump_stmt .

    $default  reduce using rule 98 (stmt)


State 178

   80 func_def: VOID ID '(' arg_list ')' $@3 func_body .

    $default  reduce using rule 80 (func_def)


State 179

   76 func_def: type ID '(' arg_list ')' $@1 func_body .

    $default  reduce using rule 76 (func_def)


State 180

   35 array_ref: ID '[' . expr ']'
   90 array_identifier: ID '[' . INT_LITERAL ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 203
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 130
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 181

   37 func_invoke: ID '(' param_list ')' .

    $default  reduce using rule 37 (func_invoke)


State 182

   39 param_list: param_list ',' . expr
   40           | param_list ',' . array_identifier

    ID                  shift, and go to state 125
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 204
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    array_identifier      go to state 205


State 183

   35 array_ref: ID '[' expr ']' .

    $default  reduce using rule 35 (array_ref)


State 184

   34 array_ref: array_ref '[' expr ']' .

    $default  reduce using rule 34 (array_ref)


State 185

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   63 element_list: element_list ',' expr .

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 63 (element_list)


State 186

  121 while_stmt: WHILE '(' . expr ')' loop_body

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 206
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 187

  120 loop_body: start_loop . stmt end_loop

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 151
    DO                  shift, and go to state 152
    IF                  shift, and go to state 153
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 154
    READ                shift, and go to state 155
    CONTINUE            shift, and go to state 156
    BREAK               shift, and go to state 157
    RETURN              shift, and go to state 158
    PRINT               shift, and go to state 159
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 160

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    stmt                  go to state 207
    expr_stmt             go to state 167
    compound_stmt         go to state 168
    simple_stmt           go to state 171
    if_stmt               go to state 172
    while_stmt            go to state 173
    do_stmt               go to state 174
    for_stmt              go to state 175
    return_stmt           go to state 176
    jump_stmt             go to state 177


State 188

  122 do_stmt: DO loop_body . WHILE '(' expr ')' SEMICOLON

    WHILE  shift, and go to state 208


State 189

  116 if_stmt: IF '(' . expr ')' stmt
  117        | IF '(' . expr ')' stmt ELSE stmt

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 209
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 190

  123 for_stmt: FOR '(' . expr_stmt expr SEMICOLON ')' loop_body
  124         | FOR '(' . expr_stmt expr SEMICOLON expr ')' loop_body
  125         | FOR '(' . expr_stmt SEMICOLON expr ')' loop_body
  126         | FOR '(' . expr_stmt SEMICOLON ')' loop_body

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    expr_stmt             go to state 210


State 191

   35 array_ref: ID . '[' expr ']'
  114 simple_stmt: READ ID . SEMICOLON

    SEMICOLON  shift, and go to state 211
    '['        shift, and go to state 87


State 192

   34 array_ref: array_ref . '[' expr ']'
  115 simple_stmt: READ array_ref . SEMICOLON

    SEMICOLON  shift, and go to state 212
    '['        shift, and go to state 107


State 193

  130 jump_stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 130 (jump_stmt)


State 194

  129 jump_stmt: BREAK SEMICOLON .

    $default  reduce using rule 129 (jump_stmt)


State 195

  128 return_stmt: RETURN SEMICOLON .

    $default  reduce using rule 128 (return_stmt)


State 196

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  127 return_stmt: RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 213
    OR         shift, and go to state 94
    AND        shift, and go to state 95
    EQ         shift, and go to state 96
    NEQ        shift, and go to state 97
    GEQ        shift, and go to state 98
    LEQ        shift, and go to state 99
    '<'        shift, and go to state 100
    '>'        shift, and go to state 101
    '+'        shift, and go to state 102
    '-'        shift, and go to state 103
    '*'        shift, and go to state 104
    '/'        shift, and go to state 105
    '%'        shift, and go to state 106


State 197

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  113 simple_stmt: PRINT expr . SEMICOLON

    SEMICOLON  shift, and go to state 214
    OR         shift, and go to state 94
    AND        shift, and go to state 95
    EQ         shift, and go to state 96
    NEQ        shift, and go to state 97
    GEQ        shift, and go to state 98
    LEQ        shift, and go to state 99
    '<'        shift, and go to state 100
    '>'        shift, and go to state 101
    '+'        shift, and go to state 102
    '-'        shift, and go to state 103
    '*'        shift, and go to state 104
    '/'        shift, and go to state 105
    '%'        shift, and go to state 106


State 198

  105 compound_stmt: '{' scope_marker . block '}'
  106              | '{' scope_marker . '}'

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 151
    DO                  shift, and go to state 152
    IF                  shift, and go to state 153
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 154
    CONST               shift, and go to state 1
    READ                shift, and go to state 155
    CONTINUE            shift, and go to state 156
    BREAK               shift, and go to state 157
    RETURN              shift, and go to state 158
    PRINT               shift, and go to state 159
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 160
    '}'                 shift, and go to state 215

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 163
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 164
    type                  go to state 165
    stmt                  go to state 166
    expr_stmt             go to state 167
    compound_stmt         go to state 168
    block                 go to state 216
    block_element         go to state 170
    simple_stmt           go to state 171
    if_stmt               go to state 172
    while_stmt            go to state 173
    do_stmt               go to state 174
    for_stmt              go to state 175
    return_stmt           go to state 176
    jump_stmt             go to state 177


State 199

  101 expr_stmt: expr SEMICOLON .

    $default  reduce using rule 101 (expr_stmt)


State 200

   49 identifier_list: ID .
   50 scaler_assignment: ID . '=' expr
   90 array_identifier: ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 34
    '='  shift, and go to state 35

    $default  reduce using rule 49 (identifier_list)


State 201

  103 func_body: '{' block '}' .

    $default  reduce using rule 103 (func_body)


State 202

  108 block: block block_element .

    $default  reduce using rule 108 (block)


State 203

   53 scaler_literal: INT_LITERAL .
   90 array_identifier: ID '[' INT_LITERAL . ']'

    ']'  shift, and go to state 85

    ']'       [reduce using rule 53 (scaler_literal)]
    $default  reduce using rule 53 (scaler_literal)


State 204

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   39 param_list: param_list ',' expr .

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106

    $default  reduce using rule 39 (param_list)


State 205

   40 param_list: param_list ',' array_identifier .
   91 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38

    $default  reduce using rule 40 (param_list)


State 206

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  121 while_stmt: WHILE '(' expr . ')' loop_body

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ')'  shift, and go to state 217


State 207

  120 loop_body: start_loop stmt . end_loop

    $default  reduce using rule 119 (end_loop)

    end_loop  go to state 218


State 208

  122 do_stmt: DO loop_body WHILE . '(' expr ')' SEMICOLON

    '('  shift, and go to state 219


State 209

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  116 if_stmt: IF '(' expr . ')' stmt
  117        | IF '(' expr . ')' stmt ELSE stmt

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ')'  shift, and go to state 220


State 210

  123 for_stmt: FOR '(' expr_stmt . expr SEMICOLON ')' loop_body
  124         | FOR '(' expr_stmt . expr SEMICOLON expr ')' loop_body
  125         | FOR '(' expr_stmt . SEMICOLON expr ')' loop_body
  126         | FOR '(' expr_stmt . SEMICOLON ')' loop_body

    SEMICOLON           shift, and go to state 221
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 222
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 211

  114 simple_stmt: READ ID SEMICOLON .

    $default  reduce using rule 114 (simple_stmt)


State 212

  115 simple_stmt: READ array_ref SEMICOLON .

    $default  reduce using rule 115 (simple_stmt)


State 213

  127 return_stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 127 (return_stmt)


State 214

  113 simple_stmt: PRINT expr SEMICOLON .

    $default  reduce using rule 113 (simple_stmt)


State 215

  106 compound_stmt: '{' scope_marker '}' .

    $default  reduce using rule 106 (compound_stmt)


State 216

  105 compound_stmt: '{' scope_marker block . '}'
  108 block: block . block_element

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 151
    DO                  shift, and go to state 152
    IF                  shift, and go to state 153
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 154
    CONST               shift, and go to state 1
    READ                shift, and go to state 155
    CONTINUE            shift, and go to state 156
    BREAK               shift, and go to state 157
    RETURN              shift, and go to state 158
    PRINT               shift, and go to state 159
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 160
    '}'                 shift, and go to state 223

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 163
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 164
    type                  go to state 165
    stmt                  go to state 166
    expr_stmt             go to state 167
    compound_stmt         go to state 168
    block_element         go to state 202
    simple_stmt           go to state 171
    if_stmt               go to state 172
    while_stmt            go to state 173
    do_stmt               go to state 174
    for_stmt              go to state 175
    return_stmt           go to state 176
    jump_stmt             go to state 177


State 217

  121 while_stmt: WHILE '(' expr ')' . loop_body

    $default  reduce using rule 118 (start_loop)

    start_loop  go to state 187
    loop_body   go to state 224


State 218

  120 loop_body: start_loop stmt end_loop .

    $default  reduce using rule 120 (loop_body)


State 219

  122 do_stmt: DO loop_body WHILE '(' . expr ')' SEMICOLON

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 225
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 220

  116 if_stmt: IF '(' expr ')' . stmt
  117        | IF '(' expr ')' . stmt ELSE stmt

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 151
    DO                  shift, and go to state 152
    IF                  shift, and go to state 153
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 154
    READ                shift, and go to state 155
    CONTINUE            shift, and go to state 156
    BREAK               shift, and go to state 157
    RETURN              shift, and go to state 158
    PRINT               shift, and go to state 159
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 160

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    stmt                  go to state 226
    expr_stmt             go to state 167
    compound_stmt         go to state 168
    simple_stmt           go to state 171
    if_stmt               go to state 172
    while_stmt            go to state 173
    do_stmt               go to state 174
    for_stmt              go to state 175
    return_stmt           go to state 176
    jump_stmt             go to state 177


State 221

  125 for_stmt: FOR '(' expr_stmt SEMICOLON . expr ')' loop_body
  126         | FOR '(' expr_stmt SEMICOLON . ')' loop_body

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 227

    expr                  go to state 228
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 222

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  123 for_stmt: FOR '(' expr_stmt expr . SEMICOLON ')' loop_body
  124         | FOR '(' expr_stmt expr . SEMICOLON expr ')' loop_body

    SEMICOLON  shift, and go to state 229
    OR         shift, and go to state 94
    AND        shift, and go to state 95
    EQ         shift, and go to state 96
    NEQ        shift, and go to state 97
    GEQ        shift, and go to state 98
    LEQ        shift, and go to state 99
    '<'        shift, and go to state 100
    '>'        shift, and go to state 101
    '+'        shift, and go to state 102
    '-'        shift, and go to state 103
    '*'        shift, and go to state 104
    '/'        shift, and go to state 105
    '%'        shift, and go to state 106


State 223

  105 compound_stmt: '{' scope_marker block '}' .

    $default  reduce using rule 105 (compound_stmt)


State 224

  121 while_stmt: WHILE '(' expr ')' loop_body .

    $default  reduce using rule 121 (while_stmt)


State 225

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  122 do_stmt: DO loop_body WHILE '(' expr . ')' SEMICOLON

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ')'  shift, and go to state 230


State 226

  116 if_stmt: IF '(' expr ')' stmt .
  117        | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 231

    ELSE      [reduce using rule 116 (if_stmt)]
    $default  reduce using rule 116 (if_stmt)


State 227

  126 for_stmt: FOR '(' expr_stmt SEMICOLON ')' . loop_body

    $default  reduce using rule 118 (start_loop)

    start_loop  go to state 187
    loop_body   go to state 232


State 228

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  125 for_stmt: FOR '(' expr_stmt SEMICOLON expr . ')' loop_body

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ')'  shift, and go to state 233


State 229

  123 for_stmt: FOR '(' expr_stmt expr SEMICOLON . ')' loop_body
  124         | FOR '(' expr_stmt expr SEMICOLON . expr ')' loop_body

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 234

    expr                  go to state 235
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 230

  122 do_stmt: DO loop_body WHILE '(' expr ')' . SEMICOLON

    SEMICOLON  shift, and go to state 236


State 231

  117 if_stmt: IF '(' expr ')' stmt ELSE . stmt

    SEMICOLON           shift, and go to state 150
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 151
    DO                  shift, and go to state 152
    IF                  shift, and go to state 153
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 154
    READ                shift, and go to state 155
    CONTINUE            shift, and go to state 156
    BREAK               shift, and go to state 157
    RETURN              shift, and go to state 158
    PRINT               shift, and go to state 159
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 160

    expr                  go to state 162
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    stmt                  go to state 237
    expr_stmt             go to state 167
    compound_stmt         go to state 168
    simple_stmt           go to state 171
    if_stmt               go to state 172
    while_stmt            go to state 173
    do_stmt               go to state 174
    for_stmt              go to state 175
    return_stmt           go to state 176
    jump_stmt             go to state 177


State 232

  126 for_stmt: FOR '(' expr_stmt SEMICOLON ')' loop_body .

    $default  reduce using rule 126 (for_stmt)


State 233

  125 for_stmt: FOR '(' expr_stmt SEMICOLON expr ')' . loop_body

    $default  reduce using rule 118 (start_loop)

    start_loop  go to state 187
    loop_body   go to state 238


State 234

  123 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' . loop_body

    $default  reduce using rule 118 (start_loop)

    start_loop  go to state 187
    loop_body   go to state 239


State 235

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  124 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr . ')' loop_body

    OR   shift, and go to state 94
    AND  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GEQ  shift, and go to state 98
    LEQ  shift, and go to state 99
    '<'  shift, and go to state 100
    '>'  shift, and go to state 101
    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105
    '%'  shift, and go to state 106
    ')'  shift, and go to state 240


State 236

  122 do_stmt: DO loop_body WHILE '(' expr ')' SEMICOLON .

    $default  reduce using rule 122 (do_stmt)


State 237

  117 if_stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 117 (if_stmt)


State 238

  125 for_stmt: FOR '(' expr_stmt SEMICOLON expr ')' loop_body .

    $default  reduce using rule 125 (for_stmt)


State 239

  123 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' loop_body .

    $default  reduce using rule 123 (for_stmt)


State 240

  124 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr ')' . loop_body

    $default  reduce using rule 118 (start_loop)

    start_loop  go to state 187
    loop_body   go to state 241


State 241

  124 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr ')' loop_body .

    $default  reduce using rule 124 (for_stmt)
