State 0 conflicts: 7 shift/reduce
State 14 conflicts: 7 shift/reduce, 7 reduce/reduce
State 20 conflicts: 7 shift/reduce, 8 reduce/reduce
State 60 conflicts: 13 shift/reduce
State 90 conflicts: 18 reduce/reduce
State 91 conflicts: 18 reduce/reduce
State 92 conflicts: 18 reduce/reduce
State 147 conflicts: 13 shift/reduce
State 204 conflicts: 1 shift/reduce
State 227 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_and_def_list func_def decl_and_def_list
    2        | func_def decl_and_def_list
    3        | decl_and_def_list func_def

    4 decl_and_def_list: decl_and_def_list declaration
    5                  | decl_and_def_list func_def
    6                  | declaration
    7                  | func_def
    8                  | %empty

    9 declaration: const_decl
   10            | var_decl
   11            | func_decl

   12 expr: expr OR expr
   13     | expr AND expr
   14     | expr EQ expr
   15     | expr NEQ expr
   16     | expr GEQ expr
   17     | expr LEQ expr
   18     | expr '>' expr
   19     | expr '<' expr
   20     | expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '%' expr
   25     | '(' expr ')'
   26     | '-' expr
   27     | '!' expr
   28     | ID
   29     | scaler_literal
   30     | func_invoke
   31     | array_ref
   32     | array_ref_assignment
   33     | scaler_assignment

   34 array_ref: array_ref '[' expr ']'
   35          | ID '[' expr ']'

   36 array_ref_assignment: array_ref '=' expr

   37 func_invoke: ID '(' param_list ')'
   38            | ID '(' ')'

   39 param_list: param_list ',' expr
   40           | param_list ',' array_identifier
   41           | expr
   42           | array_identifier

   43 var_decl: type identifier_list SEMICOLON

   44 identifier_list: identifier_list ',' ID
   45                | identifier_list ',' array_identifier
   46                | identifier_list ',' scaler_assignment
   47                | identifier_list ',' array_assignment
   48                | scaler_assignment
   49                | array_assignment
   50                | array_identifier
   51                | ID

   52 scaler_assignment: ID '=' expr

   53 scaler_literal: STRING_LITERAL
   54               | FLOAT_LITERAL
   55               | INT_LITERAL
   56               | SCIENTIFIC_LITERAL
   57               | '-' FLOAT_LITERAL
   58               | '-' INT_LITERAL
   59               | '-' SCIENTIFIC_LITERAL
   60               | TRUE
   61               | FALSE

   62 array_assignment: array_identifier '=' array_literal

   63 array_literal: '{' element_list '}'
   64              | '{' '}'

   65 element_list: element_list ',' expr
   66             | expr

   67 const_decl: CONST type const_list SEMICOLON

   68 const_list: const_list ',' ID '=' scaler_literal
   69           | ID '=' scaler_literal

   70 func_decl: type ID '(' arg_list ')' SEMICOLON
   71          | type ID '(' ')' SEMICOLON
   72          | VOID ID '(' arg_list ')' SEMICOLON
   73          | VOID ID '(' ')' SEMICOLON

   74 arg_list: arg_list ',' argument
   75         | argument

   76 argument: type identifier

   77 $@1: %empty

   78 func_def: type ID '(' arg_list ')' $@1 func_body

   79 $@2: %empty

   80 func_def: type ID '(' ')' $@2 func_body

   81 $@3: %empty

   82 func_def: VOID ID '(' arg_list ')' $@3 func_body

   83 $@4: %empty

   84 func_def: VOID ID '(' ')' $@4 func_body

   85 type: INT
   86     | BOOL
   87     | FLOAT
   88     | DOUBLE
   89     | STRING

   90 identifier: ID
   91           | array_identifier

   92 array_identifier: ID '[' INT_LITERAL ']'
   93                 | array_identifier '[' INT_LITERAL ']'

   94 stmt: compound_stmt
   95     | simple_stmt
   96     | if_stmt
   97     | while_stmt
   98     | do_stmt
   99     | for_stmt
  100     | jump_stmt
  101     | return_stmt
  102     | expr_stmt

  103 expr_stmt: expr SEMICOLON
  104          | SEMICOLON

  105 func_body: '{' block '}'
  106          | '{' '}'

  107 compound_stmt: '{' scope_marker block '}'
  108              | '{' scope_marker '}'

  109 scope_marker: %empty

  110 block: block block_element
  111      | block_element

  112 block_element: var_decl
  113              | const_decl
  114              | stmt

  115 simple_stmt: PRINT expr SEMICOLON
  116            | READ ID SEMICOLON
  117            | READ array_ref SEMICOLON

  118 if_stmt: IF '(' expr ')' stmt
  119        | IF '(' expr ')' stmt ELSE stmt

  120 start_loop: %empty

  121 end_loop: %empty

  122 loop_body: start_loop stmt end_loop

  123 while_stmt: WHILE '(' expr ')' loop_body

  124 do_stmt: DO loop_body WHILE '(' expr ')' SEMICOLON

  125 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' loop_body
  126         | FOR '(' expr_stmt expr SEMICOLON expr ')' loop_body
  127         | FOR '(' expr_stmt SEMICOLON expr ')' loop_body
  128         | FOR '(' expr_stmt SEMICOLON ')' loop_body

  129 return_stmt: RETURN expr SEMICOLON
  130            | RETURN SEMICOLON

  131 jump_stmt: BREAK SEMICOLON
  132          | CONTINUE SEMICOLON


Terminals, with rules where they appear

$end (0) 0
'!' (33) 27
'%' (37) 24
'(' (40) 25 37 38 70 71 72 73 78 80 82 84 118 119 123 124 125 126 127
    128
')' (41) 25 37 38 70 71 72 73 78 80 82 84 118 119 123 124 125 126 127
    128
'*' (42) 22
'+' (43) 20
',' (44) 39 40 44 45 46 47 65 68 74
'-' (45) 21 26 57 58 59
'/' (47) 23
'<' (60) 19
'=' (61) 36 52 62 68 69
'>' (62) 18
'[' (91) 34 35 92 93
']' (93) 34 35 92 93
'{' (123) 63 64 105 106 107 108
'}' (125) 63 64 105 106 107 108
error (256)
SEMICOLON (258) 43 67 70 71 72 73 103 104 115 116 117 124 125 126 127
    128 129 130 131 132
ID (259) 28 35 37 38 44 51 52 68 69 70 71 72 73 78 80 82 84 90 92 116
WHILE (260) 123 124
DO (261) 124
IF (262) 118 119
ELSE (263) 119
TRUE (264) 60
FALSE (265) 61
FOR (266) 125 126 127 128
CONST (267) 67
READ (268) 116 117
CONTINUE (269) 132
BREAK (270) 131
RETURN (271) 129 130
PRINT (272) 115
STRING_LITERAL (273) 53
FLOAT_LITERAL (274) 54 57
SCIENTIFIC_LITERAL (275) 56 59
INT_LITERAL (276) 55 58 92 93
OR (277) 12
AND (278) 13
EQ (279) 14
NEQ (280) 15
GEQ (281) 16
LEQ (282) 17
INT (283) 85
BOOL (284) 86
VOID (285) 72 73 82 84
FLOAT (286) 87
DOUBLE (287) 88
STRING (288) 89


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1 2 3, on right: 0
decl_and_def_list (52)
    on left: 4 5 6 7 8, on right: 1 2 3 4 5
declaration (53)
    on left: 9 10 11, on right: 4 6
expr (54)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    30 31 32 33, on right: 12 13 14 15 16 17 18 19 20 21 22 23 24 25
    26 27 34 35 36 39 41 52 65 66 103 115 118 119 123 124 125 126 127
    129
array_ref (55)
    on left: 34 35, on right: 31 34 36 117
array_ref_assignment (56)
    on left: 36, on right: 32
func_invoke (57)
    on left: 37 38, on right: 30
param_list (58)
    on left: 39 40 41 42, on right: 37 39 40
var_decl (59)
    on left: 43, on right: 10 112
identifier_list (60)
    on left: 44 45 46 47 48 49 50 51, on right: 43 44 45 46 47
scaler_assignment (61)
    on left: 52, on right: 33 46 48
scaler_literal (62)
    on left: 53 54 55 56 57 58 59 60 61, on right: 29 68 69
array_assignment (63)
    on left: 62, on right: 47 49
array_literal (64)
    on left: 63 64, on right: 62
element_list (65)
    on left: 65 66, on right: 63 65
const_decl (66)
    on left: 67, on right: 9 113
const_list (67)
    on left: 68 69, on right: 67 68
func_decl (68)
    on left: 70 71 72 73, on right: 11
arg_list (69)
    on left: 74 75, on right: 70 72 74 78 82
argument (70)
    on left: 76, on right: 74 75
func_def (71)
    on left: 78 80 82 84, on right: 1 2 3 5 7
$@1 (72)
    on left: 77, on right: 78
$@2 (73)
    on left: 79, on right: 80
$@3 (74)
    on left: 81, on right: 82
$@4 (75)
    on left: 83, on right: 84
type (76)
    on left: 85 86 87 88 89, on right: 43 67 70 71 76 78 80
identifier (77)
    on left: 90 91, on right: 76
array_identifier (78)
    on left: 92 93, on right: 40 42 45 50 62 91 93
stmt (79)
    on left: 94 95 96 97 98 99 100 101 102, on right: 114 118 119 122
expr_stmt (80)
    on left: 103 104, on right: 102 125 126 127 128
func_body (81)
    on left: 105 106, on right: 78 80 82 84
compound_stmt (82)
    on left: 107 108, on right: 94
scope_marker (83)
    on left: 109, on right: 107 108
block (84)
    on left: 110 111, on right: 105 107 110
block_element (85)
    on left: 112 113 114, on right: 110 111
simple_stmt (86)
    on left: 115 116 117, on right: 95
if_stmt (87)
    on left: 118 119, on right: 96
start_loop (88)
    on left: 120, on right: 122
end_loop (89)
    on left: 121, on right: 122
loop_body (90)
    on left: 122, on right: 123 124 125 126 127 128
while_stmt (91)
    on left: 123, on right: 97
do_stmt (92)
    on left: 124, on right: 98
for_stmt (93)
    on left: 125 126 127 128, on right: 99
return_stmt (94)
    on left: 129 130, on right: 101
jump_stmt (95)
    on left: 131 132, on right: 100


State 0

    0 $accept: . program $end

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    CONST   [reduce using rule 8 (decl_and_def_list)]
    INT     [reduce using rule 8 (decl_and_def_list)]
    BOOL    [reduce using rule 8 (decl_and_def_list)]
    VOID    [reduce using rule 8 (decl_and_def_list)]
    FLOAT   [reduce using rule 8 (decl_and_def_list)]
    DOUBLE  [reduce using rule 8 (decl_and_def_list)]
    STRING  [reduce using rule 8 (decl_and_def_list)]

    program            go to state 8
    decl_and_def_list  go to state 9
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 14
    type               go to state 15


State 1

   67 const_decl: CONST . type const_list SEMICOLON

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 16


State 2

   85 type: INT .

    $default  reduce using rule 85 (type)


State 3

   86 type: BOOL .

    $default  reduce using rule 86 (type)


State 4

   72 func_decl: VOID . ID '(' arg_list ')' SEMICOLON
   73          | VOID . ID '(' ')' SEMICOLON
   82 func_def: VOID . ID '(' arg_list ')' $@3 func_body
   84         | VOID . ID '(' ')' $@4 func_body

    ID  shift, and go to state 17


State 5

   87 type: FLOAT .

    $default  reduce using rule 87 (type)


State 6

   88 type: DOUBLE .

    $default  reduce using rule 88 (type)


State 7

   89 type: STRING .

    $default  reduce using rule 89 (type)


State 8

    0 $accept: program . $end

    $end  shift, and go to state 18


State 9

    1 program: decl_and_def_list . func_def decl_and_def_list
    3        | decl_and_def_list . func_def
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 20
    type         go to state 15


State 10

    6 decl_and_def_list: declaration .

    $default  reduce using rule 6 (decl_and_def_list)


State 11

   10 declaration: var_decl .

    $default  reduce using rule 10 (declaration)


State 12

    9 declaration: const_decl .

    $default  reduce using rule 9 (declaration)


State 13

   11 declaration: func_decl .

    $default  reduce using rule 11 (declaration)


State 14

    2 program: func_def . decl_and_def_list
    7 decl_and_def_list: func_def .

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    CONST     [reduce using rule 7 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    INT       [reduce using rule 7 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 7 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 7 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 7 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 7 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 7 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 8 (decl_and_def_list)

    decl_and_def_list  go to state 21
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 15

   43 var_decl: type . identifier_list SEMICOLON
   70 func_decl: type . ID '(' arg_list ')' SEMICOLON
   71          | type . ID '(' ')' SEMICOLON
   78 func_def: type . ID '(' arg_list ')' $@1 func_body
   80         | type . ID '(' ')' $@2 func_body

    ID  shift, and go to state 23

    identifier_list    go to state 24
    scaler_assignment  go to state 25
    array_assignment   go to state 26
    array_identifier   go to state 27


State 16

   67 const_decl: CONST type . const_list SEMICOLON

    ID  shift, and go to state 28

    const_list  go to state 29


State 17

   72 func_decl: VOID ID . '(' arg_list ')' SEMICOLON
   73          | VOID ID . '(' ')' SEMICOLON
   82 func_def: VOID ID . '(' arg_list ')' $@3 func_body
   84         | VOID ID . '(' ')' $@4 func_body

    '('  shift, and go to state 30


State 18

    0 $accept: program $end .

    $default  accept


State 19

    4 decl_and_def_list: decl_and_def_list declaration .

    $default  reduce using rule 4 (decl_and_def_list)


State 20

    1 program: decl_and_def_list func_def . decl_and_def_list
    3        | decl_and_def_list func_def .
    5 decl_and_def_list: decl_and_def_list func_def .

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $end      reduce using rule 3 (program)
    $end      [reduce using rule 8 (decl_and_def_list)]
    CONST     [reduce using rule 5 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    INT       [reduce using rule 5 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 5 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 5 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 5 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 5 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 5 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 3 (program)

    decl_and_def_list  go to state 31
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 21

    2 program: func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 2 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 32
    type         go to state 15


State 22

    7 decl_and_def_list: func_def .

    $default  reduce using rule 7 (decl_and_def_list)


State 23

   51 identifier_list: ID .
   52 scaler_assignment: ID . '=' expr
   70 func_decl: type ID . '(' arg_list ')' SEMICOLON
   71          | type ID . '(' ')' SEMICOLON
   78 func_def: type ID . '(' arg_list ')' $@1 func_body
   80         | type ID . '(' ')' $@2 func_body
   92 array_identifier: ID . '[' INT_LITERAL ']'

    '('  shift, and go to state 33
    '['  shift, and go to state 34
    '='  shift, and go to state 35

    $default  reduce using rule 51 (identifier_list)


State 24

   43 var_decl: type identifier_list . SEMICOLON
   44 identifier_list: identifier_list . ',' ID
   45                | identifier_list . ',' array_identifier
   46                | identifier_list . ',' scaler_assignment
   47                | identifier_list . ',' array_assignment

    SEMICOLON  shift, and go to state 36
    ','        shift, and go to state 37


State 25

   48 identifier_list: scaler_assignment .

    $default  reduce using rule 48 (identifier_list)


State 26

   49 identifier_list: array_assignment .

    $default  reduce using rule 49 (identifier_list)


State 27

   50 identifier_list: array_identifier .
   62 array_assignment: array_identifier . '=' array_literal
   93 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38
    '='  shift, and go to state 39

    $default  reduce using rule 50 (identifier_list)


State 28

   69 const_list: ID . '=' scaler_literal

    '='  shift, and go to state 40


State 29

   67 const_decl: CONST type const_list . SEMICOLON
   68 const_list: const_list . ',' ID '=' scaler_literal

    SEMICOLON  shift, and go to state 41
    ','        shift, and go to state 42


State 30

   72 func_decl: VOID ID '(' . arg_list ')' SEMICOLON
   73          | VOID ID '(' . ')' SEMICOLON
   82 func_def: VOID ID '(' . arg_list ')' $@3 func_body
   84         | VOID ID '(' . ')' $@4 func_body

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 43

    arg_list  go to state 44
    argument  go to state 45
    type      go to state 46


State 31

    1 program: decl_and_def_list func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    CONST   shift, and go to state 1
    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 1 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 32
    type         go to state 15


State 32

    5 decl_and_def_list: decl_and_def_list func_def .

    $default  reduce using rule 5 (decl_and_def_list)


State 33

   70 func_decl: type ID '(' . arg_list ')' SEMICOLON
   71          | type ID '(' . ')' SEMICOLON
   78 func_def: type ID '(' . arg_list ')' $@1 func_body
   80         | type ID '(' . ')' $@2 func_body

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 47

    arg_list  go to state 48
    argument  go to state 45
    type      go to state 46


State 34

   92 array_identifier: ID '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 49


State 35

   52 scaler_assignment: ID '=' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 60
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 36

   43 var_decl: type identifier_list SEMICOLON .

    $default  reduce using rule 43 (var_decl)


State 37

   44 identifier_list: identifier_list ',' . ID
   45                | identifier_list ',' . array_identifier
   46                | identifier_list ',' . scaler_assignment
   47                | identifier_list ',' . array_assignment

    ID  shift, and go to state 66

    scaler_assignment  go to state 67
    array_assignment   go to state 68
    array_identifier   go to state 69


State 38

   93 array_identifier: array_identifier '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 70


State 39

   62 array_assignment: array_identifier '=' . array_literal

    '{'  shift, and go to state 71

    array_literal  go to state 72


State 40

   69 const_list: ID '=' . scaler_literal

    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '-'                 shift, and go to state 73

    scaler_literal  go to state 74


State 41

   67 const_decl: CONST type const_list SEMICOLON .

    $default  reduce using rule 67 (const_decl)


State 42

   68 const_list: const_list ',' . ID '=' scaler_literal

    ID  shift, and go to state 75


State 43

   73 func_decl: VOID ID '(' ')' . SEMICOLON
   84 func_def: VOID ID '(' ')' . $@4 func_body

    SEMICOLON  shift, and go to state 76

    $default  reduce using rule 83 ($@4)

    $@4  go to state 77


State 44

   72 func_decl: VOID ID '(' arg_list . ')' SEMICOLON
   74 arg_list: arg_list . ',' argument
   82 func_def: VOID ID '(' arg_list . ')' $@3 func_body

    ')'  shift, and go to state 78
    ','  shift, and go to state 79


State 45

   75 arg_list: argument .

    $default  reduce using rule 75 (arg_list)


State 46

   76 argument: type . identifier

    ID  shift, and go to state 80

    identifier        go to state 81
    array_identifier  go to state 82


State 47

   71 func_decl: type ID '(' ')' . SEMICOLON
   80 func_def: type ID '(' ')' . $@2 func_body

    SEMICOLON  shift, and go to state 83

    $default  reduce using rule 79 ($@2)

    $@2  go to state 84


State 48

   70 func_decl: type ID '(' arg_list . ')' SEMICOLON
   74 arg_list: arg_list . ',' argument
   78 func_def: type ID '(' arg_list . ')' $@1 func_body

    ')'  shift, and go to state 85
    ','  shift, and go to state 79


State 49

   92 array_identifier: ID '[' INT_LITERAL . ']'

    ']'  shift, and go to state 86


State 50

   28 expr: ID .
   35 array_ref: ID . '[' expr ']'
   37 func_invoke: ID . '(' param_list ')'
   38            | ID . '(' ')'
   52 scaler_assignment: ID . '=' expr

    '('  shift, and go to state 87
    '['  shift, and go to state 88
    '='  shift, and go to state 35

    $default  reduce using rule 28 (expr)


State 51

   60 scaler_literal: TRUE .

    $default  reduce using rule 60 (scaler_literal)


State 52

   61 scaler_literal: FALSE .

    $default  reduce using rule 61 (scaler_literal)


State 53

   53 scaler_literal: STRING_LITERAL .

    $default  reduce using rule 53 (scaler_literal)


State 54

   54 scaler_literal: FLOAT_LITERAL .

    $default  reduce using rule 54 (scaler_literal)


State 55

   56 scaler_literal: SCIENTIFIC_LITERAL .

    $default  reduce using rule 56 (scaler_literal)


State 56

   55 scaler_literal: INT_LITERAL .

    $default  reduce using rule 55 (scaler_literal)


State 57

   27 expr: '!' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 89
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 58

   26 expr: '-' . expr
   57 scaler_literal: '-' . FLOAT_LITERAL
   58               | '-' . INT_LITERAL
   59               | '-' . SCIENTIFIC_LITERAL

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 90
    SCIENTIFIC_LITERAL  shift, and go to state 91
    INT_LITERAL         shift, and go to state 92
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 93
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 59

   25 expr: '(' . expr ')'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 94
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 60

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   52 scaler_assignment: ID '=' expr .

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    OR        [reduce using rule 52 (scaler_assignment)]
    AND       [reduce using rule 52 (scaler_assignment)]
    EQ        [reduce using rule 52 (scaler_assignment)]
    NEQ       [reduce using rule 52 (scaler_assignment)]
    GEQ       [reduce using rule 52 (scaler_assignment)]
    LEQ       [reduce using rule 52 (scaler_assignment)]
    '<'       [reduce using rule 52 (scaler_assignment)]
    '>'       [reduce using rule 52 (scaler_assignment)]
    '+'       [reduce using rule 52 (scaler_assignment)]
    '-'       [reduce using rule 52 (scaler_assignment)]
    '*'       [reduce using rule 52 (scaler_assignment)]
    '/'       [reduce using rule 52 (scaler_assignment)]
    '%'       [reduce using rule 52 (scaler_assignment)]
    $default  reduce using rule 52 (scaler_assignment)


State 61

   31 expr: array_ref .
   34 array_ref: array_ref . '[' expr ']'
   36 array_ref_assignment: array_ref . '=' expr

    '['  shift, and go to state 108
    '='  shift, and go to state 109

    $default  reduce using rule 31 (expr)


State 62

   32 expr: array_ref_assignment .

    $default  reduce using rule 32 (expr)


State 63

   30 expr: func_invoke .

    $default  reduce using rule 30 (expr)


State 64

   33 expr: scaler_assignment .

    $default  reduce using rule 33 (expr)


State 65

   29 expr: scaler_literal .

    $default  reduce using rule 29 (expr)


State 66

   44 identifier_list: identifier_list ',' ID .
   52 scaler_assignment: ID . '=' expr
   92 array_identifier: ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 34
    '='  shift, and go to state 35

    $default  reduce using rule 44 (identifier_list)


State 67

   46 identifier_list: identifier_list ',' scaler_assignment .

    $default  reduce using rule 46 (identifier_list)


State 68

   47 identifier_list: identifier_list ',' array_assignment .

    $default  reduce using rule 47 (identifier_list)


State 69

   45 identifier_list: identifier_list ',' array_identifier .
   62 array_assignment: array_identifier . '=' array_literal
   93 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38
    '='  shift, and go to state 39

    $default  reduce using rule 45 (identifier_list)


State 70

   93 array_identifier: array_identifier '[' INT_LITERAL . ']'

    ']'  shift, and go to state 110


State 71

   63 array_literal: '{' . element_list '}'
   64              | '{' . '}'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '}'                 shift, and go to state 111

    expr                  go to state 112
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    element_list          go to state 113


State 72

   62 array_assignment: array_identifier '=' array_literal .

    $default  reduce using rule 62 (array_assignment)


State 73

   57 scaler_literal: '-' . FLOAT_LITERAL
   58               | '-' . INT_LITERAL
   59               | '-' . SCIENTIFIC_LITERAL

    FLOAT_LITERAL       shift, and go to state 114
    SCIENTIFIC_LITERAL  shift, and go to state 115
    INT_LITERAL         shift, and go to state 116


State 74

   69 const_list: ID '=' scaler_literal .

    $default  reduce using rule 69 (const_list)


State 75

   68 const_list: const_list ',' ID . '=' scaler_literal

    '='  shift, and go to state 117


State 76

   73 func_decl: VOID ID '(' ')' SEMICOLON .

    $default  reduce using rule 73 (func_decl)


State 77

   84 func_def: VOID ID '(' ')' $@4 . func_body

    '{'  shift, and go to state 118

    func_body  go to state 119


State 78

   72 func_decl: VOID ID '(' arg_list ')' . SEMICOLON
   82 func_def: VOID ID '(' arg_list ')' . $@3 func_body

    SEMICOLON  shift, and go to state 120

    $default  reduce using rule 81 ($@3)

    $@3  go to state 121


State 79

   74 arg_list: arg_list ',' . argument

    INT     shift, and go to state 2
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    argument  go to state 122
    type      go to state 46


State 80

   90 identifier: ID .
   92 array_identifier: ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 34

    $default  reduce using rule 90 (identifier)


State 81

   76 argument: type identifier .

    $default  reduce using rule 76 (argument)


State 82

   91 identifier: array_identifier .
   93 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38

    $default  reduce using rule 91 (identifier)


State 83

   71 func_decl: type ID '(' ')' SEMICOLON .

    $default  reduce using rule 71 (func_decl)


State 84

   80 func_def: type ID '(' ')' $@2 . func_body

    '{'  shift, and go to state 118

    func_body  go to state 123


State 85

   70 func_decl: type ID '(' arg_list ')' . SEMICOLON
   78 func_def: type ID '(' arg_list ')' . $@1 func_body

    SEMICOLON  shift, and go to state 124

    $default  reduce using rule 77 ($@1)

    $@1  go to state 125


State 86

   92 array_identifier: ID '[' INT_LITERAL ']' .

    $default  reduce using rule 92 (array_identifier)


State 87

   37 func_invoke: ID '(' . param_list ')'
   38            | ID '(' . ')'

    ID                  shift, and go to state 126
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 127

    expr                  go to state 128
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    param_list            go to state 129
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    array_identifier      go to state 130


State 88

   35 array_ref: ID '[' . expr ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 131
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 89

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   27     | '!' expr .

    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 27 (expr)


State 90

   54 scaler_literal: FLOAT_LITERAL .
   57               | '-' FLOAT_LITERAL .

    SEMICOLON  reduce using rule 54 (scaler_literal)
    SEMICOLON  [reduce using rule 57 (scaler_literal)]
    OR         reduce using rule 54 (scaler_literal)
    OR         [reduce using rule 57 (scaler_literal)]
    AND        reduce using rule 54 (scaler_literal)
    AND        [reduce using rule 57 (scaler_literal)]
    EQ         reduce using rule 54 (scaler_literal)
    EQ         [reduce using rule 57 (scaler_literal)]
    NEQ        reduce using rule 54 (scaler_literal)
    NEQ        [reduce using rule 57 (scaler_literal)]
    GEQ        reduce using rule 54 (scaler_literal)
    GEQ        [reduce using rule 57 (scaler_literal)]
    LEQ        reduce using rule 54 (scaler_literal)
    LEQ        [reduce using rule 57 (scaler_literal)]
    '<'        reduce using rule 54 (scaler_literal)
    '<'        [reduce using rule 57 (scaler_literal)]
    '>'        reduce using rule 54 (scaler_literal)
    '>'        [reduce using rule 57 (scaler_literal)]
    '+'        reduce using rule 54 (scaler_literal)
    '+'        [reduce using rule 57 (scaler_literal)]
    '-'        reduce using rule 54 (scaler_literal)
    '-'        [reduce using rule 57 (scaler_literal)]
    '*'        reduce using rule 54 (scaler_literal)
    '*'        [reduce using rule 57 (scaler_literal)]
    '/'        reduce using rule 54 (scaler_literal)
    '/'        [reduce using rule 57 (scaler_literal)]
    '%'        reduce using rule 54 (scaler_literal)
    '%'        [reduce using rule 57 (scaler_literal)]
    ')'        reduce using rule 54 (scaler_literal)
    ')'        [reduce using rule 57 (scaler_literal)]
    ']'        reduce using rule 54 (scaler_literal)
    ']'        [reduce using rule 57 (scaler_literal)]
    ','        reduce using rule 54 (scaler_literal)
    ','        [reduce using rule 57 (scaler_literal)]
    '}'        reduce using rule 54 (scaler_literal)
    '}'        [reduce using rule 57 (scaler_literal)]
    $default   reduce using rule 54 (scaler_literal)


State 91

   56 scaler_literal: SCIENTIFIC_LITERAL .
   59               | '-' SCIENTIFIC_LITERAL .

    SEMICOLON  reduce using rule 56 (scaler_literal)
    SEMICOLON  [reduce using rule 59 (scaler_literal)]
    OR         reduce using rule 56 (scaler_literal)
    OR         [reduce using rule 59 (scaler_literal)]
    AND        reduce using rule 56 (scaler_literal)
    AND        [reduce using rule 59 (scaler_literal)]
    EQ         reduce using rule 56 (scaler_literal)
    EQ         [reduce using rule 59 (scaler_literal)]
    NEQ        reduce using rule 56 (scaler_literal)
    NEQ        [reduce using rule 59 (scaler_literal)]
    GEQ        reduce using rule 56 (scaler_literal)
    GEQ        [reduce using rule 59 (scaler_literal)]
    LEQ        reduce using rule 56 (scaler_literal)
    LEQ        [reduce using rule 59 (scaler_literal)]
    '<'        reduce using rule 56 (scaler_literal)
    '<'        [reduce using rule 59 (scaler_literal)]
    '>'        reduce using rule 56 (scaler_literal)
    '>'        [reduce using rule 59 (scaler_literal)]
    '+'        reduce using rule 56 (scaler_literal)
    '+'        [reduce using rule 59 (scaler_literal)]
    '-'        reduce using rule 56 (scaler_literal)
    '-'        [reduce using rule 59 (scaler_literal)]
    '*'        reduce using rule 56 (scaler_literal)
    '*'        [reduce using rule 59 (scaler_literal)]
    '/'        reduce using rule 56 (scaler_literal)
    '/'        [reduce using rule 59 (scaler_literal)]
    '%'        reduce using rule 56 (scaler_literal)
    '%'        [reduce using rule 59 (scaler_literal)]
    ')'        reduce using rule 56 (scaler_literal)
    ')'        [reduce using rule 59 (scaler_literal)]
    ']'        reduce using rule 56 (scaler_literal)
    ']'        [reduce using rule 59 (scaler_literal)]
    ','        reduce using rule 56 (scaler_literal)
    ','        [reduce using rule 59 (scaler_literal)]
    '}'        reduce using rule 56 (scaler_literal)
    '}'        [reduce using rule 59 (scaler_literal)]
    $default   reduce using rule 56 (scaler_literal)


State 92

   55 scaler_literal: INT_LITERAL .
   58               | '-' INT_LITERAL .

    SEMICOLON  reduce using rule 55 (scaler_literal)
    SEMICOLON  [reduce using rule 58 (scaler_literal)]
    OR         reduce using rule 55 (scaler_literal)
    OR         [reduce using rule 58 (scaler_literal)]
    AND        reduce using rule 55 (scaler_literal)
    AND        [reduce using rule 58 (scaler_literal)]
    EQ         reduce using rule 55 (scaler_literal)
    EQ         [reduce using rule 58 (scaler_literal)]
    NEQ        reduce using rule 55 (scaler_literal)
    NEQ        [reduce using rule 58 (scaler_literal)]
    GEQ        reduce using rule 55 (scaler_literal)
    GEQ        [reduce using rule 58 (scaler_literal)]
    LEQ        reduce using rule 55 (scaler_literal)
    LEQ        [reduce using rule 58 (scaler_literal)]
    '<'        reduce using rule 55 (scaler_literal)
    '<'        [reduce using rule 58 (scaler_literal)]
    '>'        reduce using rule 55 (scaler_literal)
    '>'        [reduce using rule 58 (scaler_literal)]
    '+'        reduce using rule 55 (scaler_literal)
    '+'        [reduce using rule 58 (scaler_literal)]
    '-'        reduce using rule 55 (scaler_literal)
    '-'        [reduce using rule 58 (scaler_literal)]
    '*'        reduce using rule 55 (scaler_literal)
    '*'        [reduce using rule 58 (scaler_literal)]
    '/'        reduce using rule 55 (scaler_literal)
    '/'        [reduce using rule 58 (scaler_literal)]
    '%'        reduce using rule 55 (scaler_literal)
    '%'        [reduce using rule 58 (scaler_literal)]
    ')'        reduce using rule 55 (scaler_literal)
    ')'        [reduce using rule 58 (scaler_literal)]
    ']'        reduce using rule 55 (scaler_literal)
    ']'        [reduce using rule 58 (scaler_literal)]
    ','        reduce using rule 55 (scaler_literal)
    ','        [reduce using rule 58 (scaler_literal)]
    '}'        reduce using rule 55 (scaler_literal)
    '}'        [reduce using rule 58 (scaler_literal)]
    $default   reduce using rule 55 (scaler_literal)


State 93

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   26     | '-' expr .

    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 26 (expr)


State 94

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   25     | '(' expr . ')'

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ')'  shift, and go to state 132


State 95

   12 expr: expr OR . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 133
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 96

   13 expr: expr AND . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 134
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 97

   14 expr: expr EQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 135
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 98

   15 expr: expr NEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 136
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 99

   16 expr: expr GEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 137
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 100

   17 expr: expr LEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 138
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 101

   19 expr: expr '<' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 139
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 102

   18 expr: expr '>' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 140
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 103

   20 expr: expr '+' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 141
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 104

   21 expr: expr '-' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 142
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 105

   22 expr: expr '*' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 143
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 106

   23 expr: expr '/' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 144
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 107

   24 expr: expr '%' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 145
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 108

   34 array_ref: array_ref '[' . expr ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 146
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 109

   36 array_ref_assignment: array_ref '=' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 147
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 110

   93 array_identifier: array_identifier '[' INT_LITERAL ']' .

    $default  reduce using rule 93 (array_identifier)


State 111

   64 array_literal: '{' '}' .

    $default  reduce using rule 64 (array_literal)


State 112

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   66 element_list: expr .

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 66 (element_list)


State 113

   63 array_literal: '{' element_list . '}'
   65 element_list: element_list . ',' expr

    ','  shift, and go to state 148
    '}'  shift, and go to state 149


State 114

   57 scaler_literal: '-' FLOAT_LITERAL .

    $default  reduce using rule 57 (scaler_literal)


State 115

   59 scaler_literal: '-' SCIENTIFIC_LITERAL .

    $default  reduce using rule 59 (scaler_literal)


State 116

   58 scaler_literal: '-' INT_LITERAL .

    $default  reduce using rule 58 (scaler_literal)


State 117

   68 const_list: const_list ',' ID '=' . scaler_literal

    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '-'                 shift, and go to state 73

    scaler_literal  go to state 150


State 118

  105 func_body: '{' . block '}'
  106          | '{' . '}'

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 152
    DO                  shift, and go to state 153
    IF                  shift, and go to state 154
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 155
    CONST               shift, and go to state 1
    READ                shift, and go to state 156
    CONTINUE            shift, and go to state 157
    BREAK               shift, and go to state 158
    RETURN              shift, and go to state 159
    PRINT               shift, and go to state 160
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 161
    '}'                 shift, and go to state 162

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 164
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 165
    type                  go to state 166
    stmt                  go to state 167
    expr_stmt             go to state 168
    compound_stmt         go to state 169
    block                 go to state 170
    block_element         go to state 171
    simple_stmt           go to state 172
    if_stmt               go to state 173
    while_stmt            go to state 174
    do_stmt               go to state 175
    for_stmt              go to state 176
    return_stmt           go to state 177
    jump_stmt             go to state 178


State 119

   84 func_def: VOID ID '(' ')' $@4 func_body .

    $default  reduce using rule 84 (func_def)


State 120

   72 func_decl: VOID ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 72 (func_decl)


State 121

   82 func_def: VOID ID '(' arg_list ')' $@3 . func_body

    '{'  shift, and go to state 118

    func_body  go to state 179


State 122

   74 arg_list: arg_list ',' argument .

    $default  reduce using rule 74 (arg_list)


State 123

   80 func_def: type ID '(' ')' $@2 func_body .

    $default  reduce using rule 80 (func_def)


State 124

   70 func_decl: type ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 70 (func_decl)


State 125

   78 func_def: type ID '(' arg_list ')' $@1 . func_body

    '{'  shift, and go to state 118

    func_body  go to state 180


State 126

   28 expr: ID .
   35 array_ref: ID . '[' expr ']'
   37 func_invoke: ID . '(' param_list ')'
   38            | ID . '(' ')'
   52 scaler_assignment: ID . '=' expr
   92 array_identifier: ID . '[' INT_LITERAL ']'

    '('  shift, and go to state 87
    '['  shift, and go to state 181
    '='  shift, and go to state 35

    $default  reduce using rule 28 (expr)


State 127

   38 func_invoke: ID '(' ')' .

    $default  reduce using rule 38 (func_invoke)


State 128

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   41 param_list: expr .

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 41 (param_list)


State 129

   37 func_invoke: ID '(' param_list . ')'
   39 param_list: param_list . ',' expr
   40           | param_list . ',' array_identifier

    ')'  shift, and go to state 182
    ','  shift, and go to state 183


State 130

   42 param_list: array_identifier .
   93 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38

    $default  reduce using rule 42 (param_list)


State 131

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   35 array_ref: ID '[' expr . ']'

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ']'  shift, and go to state 184


State 132

   25 expr: '(' expr ')' .

    $default  reduce using rule 25 (expr)


State 133

   12 expr: expr . OR expr
   12     | expr OR expr .
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 12 (expr)


State 134

   12 expr: expr . OR expr
   13     | expr . AND expr
   13     | expr AND expr .
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 13 (expr)


State 135

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   14     | expr EQ expr .
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 14 (expr)


State 136

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   15     | expr NEQ expr .
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 15 (expr)


State 137

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   16     | expr GEQ expr .
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 16 (expr)


State 138

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   17     | expr LEQ expr .
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 17 (expr)


State 139

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   19     | expr '<' expr .
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 19 (expr)


State 140

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   18     | expr '>' expr .
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 18 (expr)


State 141

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   20     | expr '+' expr .
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 20 (expr)


State 142

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 21 (expr)


State 143

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '%' expr

    $default  reduce using rule 22 (expr)


State 144

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '%' expr

    $default  reduce using rule 23 (expr)


State 145

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   24     | expr '%' expr .

    $default  reduce using rule 24 (expr)


State 146

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   34 array_ref: array_ref '[' expr . ']'

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ']'  shift, and go to state 185


State 147

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   36 array_ref_assignment: array_ref '=' expr .

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    OR        [reduce using rule 36 (array_ref_assignment)]
    AND       [reduce using rule 36 (array_ref_assignment)]
    EQ        [reduce using rule 36 (array_ref_assignment)]
    NEQ       [reduce using rule 36 (array_ref_assignment)]
    GEQ       [reduce using rule 36 (array_ref_assignment)]
    LEQ       [reduce using rule 36 (array_ref_assignment)]
    '<'       [reduce using rule 36 (array_ref_assignment)]
    '>'       [reduce using rule 36 (array_ref_assignment)]
    '+'       [reduce using rule 36 (array_ref_assignment)]
    '-'       [reduce using rule 36 (array_ref_assignment)]
    '*'       [reduce using rule 36 (array_ref_assignment)]
    '/'       [reduce using rule 36 (array_ref_assignment)]
    '%'       [reduce using rule 36 (array_ref_assignment)]
    $default  reduce using rule 36 (array_ref_assignment)


State 148

   65 element_list: element_list ',' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 186
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 149

   63 array_literal: '{' element_list '}' .

    $default  reduce using rule 63 (array_literal)


State 150

   68 const_list: const_list ',' ID '=' scaler_literal .

    $default  reduce using rule 68 (const_list)


State 151

  104 expr_stmt: SEMICOLON .

    $default  reduce using rule 104 (expr_stmt)


State 152

  123 while_stmt: WHILE . '(' expr ')' loop_body

    '('  shift, and go to state 187


State 153

  124 do_stmt: DO . loop_body WHILE '(' expr ')' SEMICOLON

    $default  reduce using rule 120 (start_loop)

    start_loop  go to state 188
    loop_body   go to state 189


State 154

  118 if_stmt: IF . '(' expr ')' stmt
  119        | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 190


State 155

  125 for_stmt: FOR . '(' expr_stmt expr SEMICOLON ')' loop_body
  126         | FOR . '(' expr_stmt expr SEMICOLON expr ')' loop_body
  127         | FOR . '(' expr_stmt SEMICOLON expr ')' loop_body
  128         | FOR . '(' expr_stmt SEMICOLON ')' loop_body

    '('  shift, and go to state 191


State 156

  116 simple_stmt: READ . ID SEMICOLON
  117            | READ . array_ref SEMICOLON

    ID  shift, and go to state 192

    array_ref  go to state 193


State 157

  132 jump_stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 194


State 158

  131 jump_stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 195


State 159

  129 return_stmt: RETURN . expr SEMICOLON
  130            | RETURN . SEMICOLON

    SEMICOLON           shift, and go to state 196
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 197
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 160

  115 simple_stmt: PRINT . expr SEMICOLON

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 198
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 161

  107 compound_stmt: '{' . scope_marker block '}'
  108              | '{' . scope_marker '}'

    $default  reduce using rule 109 (scope_marker)

    scope_marker  go to state 199


State 162

  106 func_body: '{' '}' .

    $default  reduce using rule 106 (func_body)


State 163

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  103 expr_stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 200
    OR         shift, and go to state 95
    AND        shift, and go to state 96
    EQ         shift, and go to state 97
    NEQ        shift, and go to state 98
    GEQ        shift, and go to state 99
    LEQ        shift, and go to state 100
    '<'        shift, and go to state 101
    '>'        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107


State 164

  112 block_element: var_decl .

    $default  reduce using rule 112 (block_element)


State 165

  113 block_element: const_decl .

    $default  reduce using rule 113 (block_element)


State 166

   43 var_decl: type . identifier_list SEMICOLON

    ID  shift, and go to state 201

    identifier_list    go to state 24
    scaler_assignment  go to state 25
    array_assignment   go to state 26
    array_identifier   go to state 27


State 167

  114 block_element: stmt .

    $default  reduce using rule 114 (block_element)


State 168

  102 stmt: expr_stmt .

    $default  reduce using rule 102 (stmt)


State 169

   94 stmt: compound_stmt .

    $default  reduce using rule 94 (stmt)


State 170

  105 func_body: '{' block . '}'
  110 block: block . block_element

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 152
    DO                  shift, and go to state 153
    IF                  shift, and go to state 154
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 155
    CONST               shift, and go to state 1
    READ                shift, and go to state 156
    CONTINUE            shift, and go to state 157
    BREAK               shift, and go to state 158
    RETURN              shift, and go to state 159
    PRINT               shift, and go to state 160
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 161
    '}'                 shift, and go to state 202

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 164
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 165
    type                  go to state 166
    stmt                  go to state 167
    expr_stmt             go to state 168
    compound_stmt         go to state 169
    block_element         go to state 203
    simple_stmt           go to state 172
    if_stmt               go to state 173
    while_stmt            go to state 174
    do_stmt               go to state 175
    for_stmt              go to state 176
    return_stmt           go to state 177
    jump_stmt             go to state 178


State 171

  111 block: block_element .

    $default  reduce using rule 111 (block)


State 172

   95 stmt: simple_stmt .

    $default  reduce using rule 95 (stmt)


State 173

   96 stmt: if_stmt .

    $default  reduce using rule 96 (stmt)


State 174

   97 stmt: while_stmt .

    $default  reduce using rule 97 (stmt)


State 175

   98 stmt: do_stmt .

    $default  reduce using rule 98 (stmt)


State 176

   99 stmt: for_stmt .

    $default  reduce using rule 99 (stmt)


State 177

  101 stmt: return_stmt .

    $default  reduce using rule 101 (stmt)


State 178

  100 stmt: jump_stmt .

    $default  reduce using rule 100 (stmt)


State 179

   82 func_def: VOID ID '(' arg_list ')' $@3 func_body .

    $default  reduce using rule 82 (func_def)


State 180

   78 func_def: type ID '(' arg_list ')' $@1 func_body .

    $default  reduce using rule 78 (func_def)


State 181

   35 array_ref: ID '[' . expr ']'
   92 array_identifier: ID '[' . INT_LITERAL ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 204
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 131
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 182

   37 func_invoke: ID '(' param_list ')' .

    $default  reduce using rule 37 (func_invoke)


State 183

   39 param_list: param_list ',' . expr
   40           | param_list ',' . array_identifier

    ID                  shift, and go to state 126
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 205
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    array_identifier      go to state 206


State 184

   35 array_ref: ID '[' expr ']' .

    $default  reduce using rule 35 (array_ref)


State 185

   34 array_ref: array_ref '[' expr ']' .

    $default  reduce using rule 34 (array_ref)


State 186

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   65 element_list: element_list ',' expr .

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 65 (element_list)


State 187

  123 while_stmt: WHILE '(' . expr ')' loop_body

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 207
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 188

  122 loop_body: start_loop . stmt end_loop

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 152
    DO                  shift, and go to state 153
    IF                  shift, and go to state 154
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 155
    READ                shift, and go to state 156
    CONTINUE            shift, and go to state 157
    BREAK               shift, and go to state 158
    RETURN              shift, and go to state 159
    PRINT               shift, and go to state 160
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 161

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    stmt                  go to state 208
    expr_stmt             go to state 168
    compound_stmt         go to state 169
    simple_stmt           go to state 172
    if_stmt               go to state 173
    while_stmt            go to state 174
    do_stmt               go to state 175
    for_stmt              go to state 176
    return_stmt           go to state 177
    jump_stmt             go to state 178


State 189

  124 do_stmt: DO loop_body . WHILE '(' expr ')' SEMICOLON

    WHILE  shift, and go to state 209


State 190

  118 if_stmt: IF '(' . expr ')' stmt
  119        | IF '(' . expr ')' stmt ELSE stmt

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 210
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 191

  125 for_stmt: FOR '(' . expr_stmt expr SEMICOLON ')' loop_body
  126         | FOR '(' . expr_stmt expr SEMICOLON expr ')' loop_body
  127         | FOR '(' . expr_stmt SEMICOLON expr ')' loop_body
  128         | FOR '(' . expr_stmt SEMICOLON ')' loop_body

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    expr_stmt             go to state 211


State 192

   35 array_ref: ID . '[' expr ']'
  116 simple_stmt: READ ID . SEMICOLON

    SEMICOLON  shift, and go to state 212
    '['        shift, and go to state 88


State 193

   34 array_ref: array_ref . '[' expr ']'
  117 simple_stmt: READ array_ref . SEMICOLON

    SEMICOLON  shift, and go to state 213
    '['        shift, and go to state 108


State 194

  132 jump_stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 132 (jump_stmt)


State 195

  131 jump_stmt: BREAK SEMICOLON .

    $default  reduce using rule 131 (jump_stmt)


State 196

  130 return_stmt: RETURN SEMICOLON .

    $default  reduce using rule 130 (return_stmt)


State 197

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  129 return_stmt: RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 214
    OR         shift, and go to state 95
    AND        shift, and go to state 96
    EQ         shift, and go to state 97
    NEQ        shift, and go to state 98
    GEQ        shift, and go to state 99
    LEQ        shift, and go to state 100
    '<'        shift, and go to state 101
    '>'        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107


State 198

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  115 simple_stmt: PRINT expr . SEMICOLON

    SEMICOLON  shift, and go to state 215
    OR         shift, and go to state 95
    AND        shift, and go to state 96
    EQ         shift, and go to state 97
    NEQ        shift, and go to state 98
    GEQ        shift, and go to state 99
    LEQ        shift, and go to state 100
    '<'        shift, and go to state 101
    '>'        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107


State 199

  107 compound_stmt: '{' scope_marker . block '}'
  108              | '{' scope_marker . '}'

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 152
    DO                  shift, and go to state 153
    IF                  shift, and go to state 154
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 155
    CONST               shift, and go to state 1
    READ                shift, and go to state 156
    CONTINUE            shift, and go to state 157
    BREAK               shift, and go to state 158
    RETURN              shift, and go to state 159
    PRINT               shift, and go to state 160
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 161
    '}'                 shift, and go to state 216

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 164
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 165
    type                  go to state 166
    stmt                  go to state 167
    expr_stmt             go to state 168
    compound_stmt         go to state 169
    block                 go to state 217
    block_element         go to state 171
    simple_stmt           go to state 172
    if_stmt               go to state 173
    while_stmt            go to state 174
    do_stmt               go to state 175
    for_stmt              go to state 176
    return_stmt           go to state 177
    jump_stmt             go to state 178


State 200

  103 expr_stmt: expr SEMICOLON .

    $default  reduce using rule 103 (expr_stmt)


State 201

   51 identifier_list: ID .
   52 scaler_assignment: ID . '=' expr
   92 array_identifier: ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 34
    '='  shift, and go to state 35

    $default  reduce using rule 51 (identifier_list)


State 202

  105 func_body: '{' block '}' .

    $default  reduce using rule 105 (func_body)


State 203

  110 block: block block_element .

    $default  reduce using rule 110 (block)


State 204

   55 scaler_literal: INT_LITERAL .
   92 array_identifier: ID '[' INT_LITERAL . ']'

    ']'  shift, and go to state 86

    ']'       [reduce using rule 55 (scaler_literal)]
    $default  reduce using rule 55 (scaler_literal)


State 205

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   39 param_list: param_list ',' expr .

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107

    $default  reduce using rule 39 (param_list)


State 206

   40 param_list: param_list ',' array_identifier .
   93 array_identifier: array_identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 38

    $default  reduce using rule 40 (param_list)


State 207

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  123 while_stmt: WHILE '(' expr . ')' loop_body

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ')'  shift, and go to state 218


State 208

  122 loop_body: start_loop stmt . end_loop

    $default  reduce using rule 121 (end_loop)

    end_loop  go to state 219


State 209

  124 do_stmt: DO loop_body WHILE . '(' expr ')' SEMICOLON

    '('  shift, and go to state 220


State 210

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  118 if_stmt: IF '(' expr . ')' stmt
  119        | IF '(' expr . ')' stmt ELSE stmt

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ')'  shift, and go to state 221


State 211

  125 for_stmt: FOR '(' expr_stmt . expr SEMICOLON ')' loop_body
  126         | FOR '(' expr_stmt . expr SEMICOLON expr ')' loop_body
  127         | FOR '(' expr_stmt . SEMICOLON expr ')' loop_body
  128         | FOR '(' expr_stmt . SEMICOLON ')' loop_body

    SEMICOLON           shift, and go to state 222
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 223
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 212

  116 simple_stmt: READ ID SEMICOLON .

    $default  reduce using rule 116 (simple_stmt)


State 213

  117 simple_stmt: READ array_ref SEMICOLON .

    $default  reduce using rule 117 (simple_stmt)


State 214

  129 return_stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 129 (return_stmt)


State 215

  115 simple_stmt: PRINT expr SEMICOLON .

    $default  reduce using rule 115 (simple_stmt)


State 216

  108 compound_stmt: '{' scope_marker '}' .

    $default  reduce using rule 108 (compound_stmt)


State 217

  107 compound_stmt: '{' scope_marker block . '}'
  110 block: block . block_element

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 152
    DO                  shift, and go to state 153
    IF                  shift, and go to state 154
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 155
    CONST               shift, and go to state 1
    READ                shift, and go to state 156
    CONTINUE            shift, and go to state 157
    BREAK               shift, and go to state 158
    RETURN              shift, and go to state 159
    PRINT               shift, and go to state 160
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    INT                 shift, and go to state 2
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 161
    '}'                 shift, and go to state 224

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    var_decl              go to state 164
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    const_decl            go to state 165
    type                  go to state 166
    stmt                  go to state 167
    expr_stmt             go to state 168
    compound_stmt         go to state 169
    block_element         go to state 203
    simple_stmt           go to state 172
    if_stmt               go to state 173
    while_stmt            go to state 174
    do_stmt               go to state 175
    for_stmt              go to state 176
    return_stmt           go to state 177
    jump_stmt             go to state 178


State 218

  123 while_stmt: WHILE '(' expr ')' . loop_body

    $default  reduce using rule 120 (start_loop)

    start_loop  go to state 188
    loop_body   go to state 225


State 219

  122 loop_body: start_loop stmt end_loop .

    $default  reduce using rule 122 (loop_body)


State 220

  124 do_stmt: DO loop_body WHILE '(' . expr ')' SEMICOLON

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59

    expr                  go to state 226
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 221

  118 if_stmt: IF '(' expr ')' . stmt
  119        | IF '(' expr ')' . stmt ELSE stmt

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 152
    DO                  shift, and go to state 153
    IF                  shift, and go to state 154
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 155
    READ                shift, and go to state 156
    CONTINUE            shift, and go to state 157
    BREAK               shift, and go to state 158
    RETURN              shift, and go to state 159
    PRINT               shift, and go to state 160
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 161

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    stmt                  go to state 227
    expr_stmt             go to state 168
    compound_stmt         go to state 169
    simple_stmt           go to state 172
    if_stmt               go to state 173
    while_stmt            go to state 174
    do_stmt               go to state 175
    for_stmt              go to state 176
    return_stmt           go to state 177
    jump_stmt             go to state 178


State 222

  127 for_stmt: FOR '(' expr_stmt SEMICOLON . expr ')' loop_body
  128         | FOR '(' expr_stmt SEMICOLON . ')' loop_body

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 228

    expr                  go to state 229
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 223

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  125 for_stmt: FOR '(' expr_stmt expr . SEMICOLON ')' loop_body
  126         | FOR '(' expr_stmt expr . SEMICOLON expr ')' loop_body

    SEMICOLON  shift, and go to state 230
    OR         shift, and go to state 95
    AND        shift, and go to state 96
    EQ         shift, and go to state 97
    NEQ        shift, and go to state 98
    GEQ        shift, and go to state 99
    LEQ        shift, and go to state 100
    '<'        shift, and go to state 101
    '>'        shift, and go to state 102
    '+'        shift, and go to state 103
    '-'        shift, and go to state 104
    '*'        shift, and go to state 105
    '/'        shift, and go to state 106
    '%'        shift, and go to state 107


State 224

  107 compound_stmt: '{' scope_marker block '}' .

    $default  reduce using rule 107 (compound_stmt)


State 225

  123 while_stmt: WHILE '(' expr ')' loop_body .

    $default  reduce using rule 123 (while_stmt)


State 226

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  124 do_stmt: DO loop_body WHILE '(' expr . ')' SEMICOLON

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ')'  shift, and go to state 231


State 227

  118 if_stmt: IF '(' expr ')' stmt .
  119        | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 232

    ELSE      [reduce using rule 118 (if_stmt)]
    $default  reduce using rule 118 (if_stmt)


State 228

  128 for_stmt: FOR '(' expr_stmt SEMICOLON ')' . loop_body

    $default  reduce using rule 120 (start_loop)

    start_loop  go to state 188
    loop_body   go to state 233


State 229

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  127 for_stmt: FOR '(' expr_stmt SEMICOLON expr . ')' loop_body

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ')'  shift, and go to state 234


State 230

  125 for_stmt: FOR '(' expr_stmt expr SEMICOLON . ')' loop_body
  126         | FOR '(' expr_stmt expr SEMICOLON . expr ')' loop_body

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 235

    expr                  go to state 236
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65


State 231

  124 do_stmt: DO loop_body WHILE '(' expr ')' . SEMICOLON

    SEMICOLON  shift, and go to state 237


State 232

  119 if_stmt: IF '(' expr ')' stmt ELSE . stmt

    SEMICOLON           shift, and go to state 151
    ID                  shift, and go to state 50
    WHILE               shift, and go to state 152
    DO                  shift, and go to state 153
    IF                  shift, and go to state 154
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 155
    READ                shift, and go to state 156
    CONTINUE            shift, and go to state 157
    BREAK               shift, and go to state 158
    RETURN              shift, and go to state 159
    PRINT               shift, and go to state 160
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    SCIENTIFIC_LITERAL  shift, and go to state 55
    INT_LITERAL         shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 161

    expr                  go to state 163
    array_ref             go to state 61
    array_ref_assignment  go to state 62
    func_invoke           go to state 63
    scaler_assignment     go to state 64
    scaler_literal        go to state 65
    stmt                  go to state 238
    expr_stmt             go to state 168
    compound_stmt         go to state 169
    simple_stmt           go to state 172
    if_stmt               go to state 173
    while_stmt            go to state 174
    do_stmt               go to state 175
    for_stmt              go to state 176
    return_stmt           go to state 177
    jump_stmt             go to state 178


State 233

  128 for_stmt: FOR '(' expr_stmt SEMICOLON ')' loop_body .

    $default  reduce using rule 128 (for_stmt)


State 234

  127 for_stmt: FOR '(' expr_stmt SEMICOLON expr ')' . loop_body

    $default  reduce using rule 120 (start_loop)

    start_loop  go to state 188
    loop_body   go to state 239


State 235

  125 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' . loop_body

    $default  reduce using rule 120 (start_loop)

    start_loop  go to state 188
    loop_body   go to state 240


State 236

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  126 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr . ')' loop_body

    OR   shift, and go to state 95
    AND  shift, and go to state 96
    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    GEQ  shift, and go to state 99
    LEQ  shift, and go to state 100
    '<'  shift, and go to state 101
    '>'  shift, and go to state 102
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
    '*'  shift, and go to state 105
    '/'  shift, and go to state 106
    '%'  shift, and go to state 107
    ')'  shift, and go to state 241


State 237

  124 do_stmt: DO loop_body WHILE '(' expr ')' SEMICOLON .

    $default  reduce using rule 124 (do_stmt)


State 238

  119 if_stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 119 (if_stmt)


State 239

  127 for_stmt: FOR '(' expr_stmt SEMICOLON expr ')' loop_body .

    $default  reduce using rule 127 (for_stmt)


State 240

  125 for_stmt: FOR '(' expr_stmt expr SEMICOLON ')' loop_body .

    $default  reduce using rule 125 (for_stmt)


State 241

  126 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr ')' . loop_body

    $default  reduce using rule 120 (start_loop)

    start_loop  go to state 188
    loop_body   go to state 242


State 242

  126 for_stmt: FOR '(' expr_stmt expr SEMICOLON expr ')' loop_body .

    $default  reduce using rule 126 (for_stmt)
