Terminals unused in grammar

   BOOLEAN


State 0 conflicts: 7 shift/reduce
State 14 conflicts: 7 shift/reduce, 7 reduce/reduce
State 20 conflicts: 7 shift/reduce, 8 reduce/reduce
State 50 conflicts: 2 shift/reduce
State 61 conflicts: 13 shift/reduce
State 84 conflicts: 44 reduce/reduce
State 85 conflicts: 44 reduce/reduce
State 86 conflicts: 44 reduce/reduce
State 111 conflicts: 1 shift/reduce, 1 reduce/reduce
State 177 conflicts: 1 shift/reduce
State 178 conflicts: 3 reduce/reduce
State 202 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_and_def_list func_def decl_and_def_list
    2        | func_def decl_and_def_list
    3        | decl_and_def_list func_def

    4 decl_and_def_list: decl_and_def_list declaration
    5                  | decl_and_def_list func_def
    6                  | declaration
    7                  | func_def
    8                  | %empty

    9 declaration: const_decl
   10            | var_decl
   11            | func_decl

   12 expr: expr OR expr
   13     | expr AND expr
   14     | expr EQ expr
   15     | expr NEQ expr
   16     | expr GEQ expr
   17     | expr LEQ expr
   18     | expr '>' expr
   19     | expr '<' expr
   20     | expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '%' expr
   25     | '(' expr ')'
   26     | '-' expr
   27     | '!' expr
   28     | ID
   29     | literal
   30     | func_invoke
   31     | array_ref
   32     | assignment

   33 array_ref: array_ref '[' expr ']'
   34          | ID '[' expr ']'

   35 func_invoke: ID '(' param_list ')'
   36            | ID '(' ')'

   37 param_list: param_list ',' expr
   38           | expr

   39 var_decl: type identifier_list SEMICOLON

   40 identifier_list: identifier_list ',' identifier
   41                | identifier_list ',' assignment
   42                | assignment
   43                | identifier

   44 assignment: identifier '=' expr

   45 literal: STRING_LITERAL
   46        | FLOAT_LITERAL
   47        | INT_LITERAL
   48        | SCIENTIFIC_LITERAL
   49        | '-' FLOAT_LITERAL
   50        | '-' INT_LITERAL
   51        | '-' SCIENTIFIC_LITERAL
   52        | array_literal
   53        | TRUE
   54        | FALSE

   55 array_literal: '{' element_list '}'
   56              | '{' '}'

   57 element_list: element_list ',' expr
   58             | expr

   59 const_decl: CONST type const_list SEMICOLON

   60 const_list: const_list ',' ID '=' STRING_LITERAL
   61           | const_list ',' ID
   62           | ID
   63           | ID '=' literal

   64 func_decl: type ID '(' arg_list ')' SEMICOLON
   65          | type ID '(' ')' SEMICOLON
   66          | VOID ID '(' arg_list ')' SEMICOLON
   67          | VOID ID '(' ')' SEMICOLON

   68 arg_list: arg_list ',' argument
   69         | argument

   70 argument: type identifier

   71 func_def: type ID '(' arg_list ')' compound_stmt
   72         | type ID '(' ')' compound_stmt
   73         | VOID ID '(' arg_list ')' compound_stmt
   74         | VOID ID '(' ')' compound_stmt

   75 type: INT
   76     | BOOL
   77     | FLOAT
   78     | DOUBLE
   79     | STRING

   80 identifier: ID
   81           | identifier '[' INT_LITERAL ']'

   82 stmt: compound_stmt
   83     | simple_stmt
   84     | if_stmt
   85     | while_stmt
   86     | do_stmt
   87     | for_stmt
   88     | jump_stmt
   89     | expr_stmt

   90 expr_stmt: expr SEMICOLON
   91          | SEMICOLON

   92 compound_stmt: '{' block '}'
   93              | '{' '}'

   94 block: block block_element
   95      | block_element

   96 block_element: var_decl
   97              | const_decl
   98              | stmt

   99 simple_stmt: variable_ref '=' expr SEMICOLON
  100            | PRINT expr
  101            | READ variable_ref

  102 variable_ref: ID
  103             | array_ref

  104 if_stmt: IF '(' expr ')' stmt
  105        | IF '(' expr ')' stmt ELSE stmt

  106 while_stmt: WHILE '(' expr ')' stmt

  107 do_stmt: DO stmt WHILE '(' expr ')' SEMICOLON

  108 for_stmt: FOR '(' expr_stmt expr_stmt ')' stmt
  109         | FOR '(' expr_stmt expr_stmt expr ')' stmt

  110 jump_stmt: RETURN expr_stmt
  111          | BREAK SEMICOLON
  112          | CONTINUE SEMICOLON


Terminals, with rules where they appear

$end (0) 0
'!' (33) 27
'%' (37) 24
'(' (40) 25 35 36 64 65 66 67 71 72 73 74 104 105 106 107 108 109
')' (41) 25 35 36 64 65 66 67 71 72 73 74 104 105 106 107 108 109
'*' (42) 22
'+' (43) 20
',' (44) 37 40 41 57 60 61 68
'-' (45) 21 26 49 50 51
'/' (47) 23
'<' (60) 19
'=' (61) 44 60 63 99
'>' (62) 18
'[' (91) 33 34 81
']' (93) 33 34 81
'{' (123) 55 56 92 93
'}' (125) 55 56 92 93
error (256)
SEMICOLON (258) 39 59 64 65 66 67 90 91 99 107 111 112
ID (259) 28 34 35 36 60 61 62 63 64 65 66 67 71 72 73 74 80 102
INT (260) 75
WHILE (261) 106 107
DO (262) 107
IF (263) 104 105
ELSE (264) 105
TRUE (265) 53
FALSE (266) 54
FOR (267) 108 109
CONST (268) 59
READ (269) 101
BOOLEAN (270)
BOOL (271) 76
VOID (272) 66 67 73 74
FLOAT (273) 77
DOUBLE (274) 78
STRING (275) 79
CONTINUE (276) 112
BREAK (277) 111
RETURN (278) 110
PRINT (279) 100
STRING_LITERAL (280) 45 60
FLOAT_LITERAL (281) 46 49
INT_LITERAL (282) 47 50 81
SCIENTIFIC_LITERAL (283) 48 51
OR (284) 12
AND (285) 13
EQ (286) 14
NEQ (287) 15
GEQ (288) 16
LEQ (289) 17


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1 2 3, on right: 0
decl_and_def_list (53)
    on left: 4 5 6 7 8, on right: 1 2 3 4 5
declaration (54)
    on left: 9 10 11, on right: 4 6
expr (55)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    30 31 32, on right: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 33 34 37 38 44 57 58 90 99 100 104 105 106 107 109
array_ref (56)
    on left: 33 34, on right: 31 33 103
func_invoke (57)
    on left: 35 36, on right: 30
param_list (58)
    on left: 37 38, on right: 35 37
var_decl (59)
    on left: 39, on right: 10 96
identifier_list (60)
    on left: 40 41 42 43, on right: 39 40 41
assignment (61)
    on left: 44, on right: 32 41 42
literal (62)
    on left: 45 46 47 48 49 50 51 52 53 54, on right: 29 63
array_literal (63)
    on left: 55 56, on right: 52
element_list (64)
    on left: 57 58, on right: 55 57
const_decl (65)
    on left: 59, on right: 9 97
const_list (66)
    on left: 60 61 62 63, on right: 59 60 61
func_decl (67)
    on left: 64 65 66 67, on right: 11
arg_list (68)
    on left: 68 69, on right: 64 66 68 71 73
argument (69)
    on left: 70, on right: 68 69
func_def (70)
    on left: 71 72 73 74, on right: 1 2 3 5 7
type (71)
    on left: 75 76 77 78 79, on right: 39 59 64 65 70 71 72
identifier (72)
    on left: 80 81, on right: 40 43 44 70 81
stmt (73)
    on left: 82 83 84 85 86 87 88 89, on right: 98 104 105 106 107
    108 109
expr_stmt (74)
    on left: 90 91, on right: 89 108 109 110
compound_stmt (75)
    on left: 92 93, on right: 71 72 73 74 82
block (76)
    on left: 94 95, on right: 92 94
block_element (77)
    on left: 96 97 98, on right: 94 95
simple_stmt (78)
    on left: 99 100 101, on right: 83
variable_ref (79)
    on left: 102 103, on right: 99 101
if_stmt (80)
    on left: 104 105, on right: 84
while_stmt (81)
    on left: 106, on right: 85
do_stmt (82)
    on left: 107, on right: 86
for_stmt (83)
    on left: 108 109, on right: 87
jump_stmt (84)
    on left: 110 111 112, on right: 88


State 0

    0 $accept: . program $end

    INT     shift, and go to state 1
    CONST   shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    INT     [reduce using rule 8 (decl_and_def_list)]
    CONST   [reduce using rule 8 (decl_and_def_list)]
    BOOL    [reduce using rule 8 (decl_and_def_list)]
    VOID    [reduce using rule 8 (decl_and_def_list)]
    FLOAT   [reduce using rule 8 (decl_and_def_list)]
    DOUBLE  [reduce using rule 8 (decl_and_def_list)]
    STRING  [reduce using rule 8 (decl_and_def_list)]

    program            go to state 8
    decl_and_def_list  go to state 9
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 14
    type               go to state 15


State 1

   75 type: INT .

    $default  reduce using rule 75 (type)


State 2

   59 const_decl: CONST . type const_list SEMICOLON

    INT     shift, and go to state 1
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    type  go to state 16


State 3

   76 type: BOOL .

    $default  reduce using rule 76 (type)


State 4

   66 func_decl: VOID . ID '(' arg_list ')' SEMICOLON
   67          | VOID . ID '(' ')' SEMICOLON
   73 func_def: VOID . ID '(' arg_list ')' compound_stmt
   74         | VOID . ID '(' ')' compound_stmt

    ID  shift, and go to state 17


State 5

   77 type: FLOAT .

    $default  reduce using rule 77 (type)


State 6

   78 type: DOUBLE .

    $default  reduce using rule 78 (type)


State 7

   79 type: STRING .

    $default  reduce using rule 79 (type)


State 8

    0 $accept: program . $end

    $end  shift, and go to state 18


State 9

    1 program: decl_and_def_list . func_def decl_and_def_list
    3        | decl_and_def_list . func_def
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    INT     shift, and go to state 1
    CONST   shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 20
    type         go to state 15


State 10

    6 decl_and_def_list: declaration .

    $default  reduce using rule 6 (decl_and_def_list)


State 11

   10 declaration: var_decl .

    $default  reduce using rule 10 (declaration)


State 12

    9 declaration: const_decl .

    $default  reduce using rule 9 (declaration)


State 13

   11 declaration: func_decl .

    $default  reduce using rule 11 (declaration)


State 14

    2 program: func_def . decl_and_def_list
    7 decl_and_def_list: func_def .

    INT     shift, and go to state 1
    CONST   shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    INT       [reduce using rule 7 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    CONST     [reduce using rule 7 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 7 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 7 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 7 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 7 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 7 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 8 (decl_and_def_list)

    decl_and_def_list  go to state 21
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 15

   39 var_decl: type . identifier_list SEMICOLON
   64 func_decl: type . ID '(' arg_list ')' SEMICOLON
   65          | type . ID '(' ')' SEMICOLON
   71 func_def: type . ID '(' arg_list ')' compound_stmt
   72         | type . ID '(' ')' compound_stmt

    ID  shift, and go to state 23

    identifier_list  go to state 24
    assignment       go to state 25
    identifier       go to state 26


State 16

   59 const_decl: CONST type . const_list SEMICOLON

    ID  shift, and go to state 27

    const_list  go to state 28


State 17

   66 func_decl: VOID ID . '(' arg_list ')' SEMICOLON
   67          | VOID ID . '(' ')' SEMICOLON
   73 func_def: VOID ID . '(' arg_list ')' compound_stmt
   74         | VOID ID . '(' ')' compound_stmt

    '('  shift, and go to state 29


State 18

    0 $accept: program $end .

    $default  accept


State 19

    4 decl_and_def_list: decl_and_def_list declaration .

    $default  reduce using rule 4 (decl_and_def_list)


State 20

    1 program: decl_and_def_list func_def . decl_and_def_list
    3        | decl_and_def_list func_def .
    5 decl_and_def_list: decl_and_def_list func_def .

    INT     shift, and go to state 1
    CONST   shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $end      reduce using rule 3 (program)
    $end      [reduce using rule 8 (decl_and_def_list)]
    INT       [reduce using rule 5 (decl_and_def_list)]
    INT       [reduce using rule 8 (decl_and_def_list)]
    CONST     [reduce using rule 5 (decl_and_def_list)]
    CONST     [reduce using rule 8 (decl_and_def_list)]
    BOOL      [reduce using rule 5 (decl_and_def_list)]
    BOOL      [reduce using rule 8 (decl_and_def_list)]
    VOID      [reduce using rule 5 (decl_and_def_list)]
    VOID      [reduce using rule 8 (decl_and_def_list)]
    FLOAT     [reduce using rule 5 (decl_and_def_list)]
    FLOAT     [reduce using rule 8 (decl_and_def_list)]
    DOUBLE    [reduce using rule 5 (decl_and_def_list)]
    DOUBLE    [reduce using rule 8 (decl_and_def_list)]
    STRING    [reduce using rule 5 (decl_and_def_list)]
    STRING    [reduce using rule 8 (decl_and_def_list)]
    $default  reduce using rule 3 (program)

    decl_and_def_list  go to state 30
    declaration        go to state 10
    var_decl           go to state 11
    const_decl         go to state 12
    func_decl          go to state 13
    func_def           go to state 22
    type               go to state 15


State 21

    2 program: func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    INT     shift, and go to state 1
    CONST   shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 2 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 31
    type         go to state 15


State 22

    7 decl_and_def_list: func_def .

    $default  reduce using rule 7 (decl_and_def_list)


State 23

   64 func_decl: type ID . '(' arg_list ')' SEMICOLON
   65          | type ID . '(' ')' SEMICOLON
   71 func_def: type ID . '(' arg_list ')' compound_stmt
   72         | type ID . '(' ')' compound_stmt
   80 identifier: ID .

    '('  shift, and go to state 32

    $default  reduce using rule 80 (identifier)


State 24

   39 var_decl: type identifier_list . SEMICOLON
   40 identifier_list: identifier_list . ',' identifier
   41                | identifier_list . ',' assignment

    SEMICOLON  shift, and go to state 33
    ','        shift, and go to state 34


State 25

   42 identifier_list: assignment .

    $default  reduce using rule 42 (identifier_list)


State 26

   43 identifier_list: identifier .
   44 assignment: identifier . '=' expr
   81 identifier: identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 35
    '='  shift, and go to state 36

    $default  reduce using rule 43 (identifier_list)


State 27

   62 const_list: ID .
   63           | ID . '=' literal

    '='  shift, and go to state 37

    $default  reduce using rule 62 (const_list)


State 28

   59 const_decl: CONST type const_list . SEMICOLON
   60 const_list: const_list . ',' ID '=' STRING_LITERAL
   61           | const_list . ',' ID

    SEMICOLON  shift, and go to state 38
    ','        shift, and go to state 39


State 29

   66 func_decl: VOID ID '(' . arg_list ')' SEMICOLON
   67          | VOID ID '(' . ')' SEMICOLON
   73 func_def: VOID ID '(' . arg_list ')' compound_stmt
   74         | VOID ID '(' . ')' compound_stmt

    INT     shift, and go to state 1
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 40

    arg_list  go to state 41
    argument  go to state 42
    type      go to state 43


State 30

    1 program: decl_and_def_list func_def decl_and_def_list .
    4 decl_and_def_list: decl_and_def_list . declaration
    5                  | decl_and_def_list . func_def

    INT     shift, and go to state 1
    CONST   shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    $default  reduce using rule 1 (program)

    declaration  go to state 19
    var_decl     go to state 11
    const_decl   go to state 12
    func_decl    go to state 13
    func_def     go to state 31
    type         go to state 15


State 31

    5 decl_and_def_list: decl_and_def_list func_def .

    $default  reduce using rule 5 (decl_and_def_list)


State 32

   64 func_decl: type ID '(' . arg_list ')' SEMICOLON
   65          | type ID '(' . ')' SEMICOLON
   71 func_def: type ID '(' . arg_list ')' compound_stmt
   72         | type ID '(' . ')' compound_stmt

    INT     shift, and go to state 1
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7
    ')'     shift, and go to state 44

    arg_list  go to state 45
    argument  go to state 42
    type      go to state 43


State 33

   39 var_decl: type identifier_list SEMICOLON .

    $default  reduce using rule 39 (var_decl)


State 34

   40 identifier_list: identifier_list ',' . identifier
   41                | identifier_list ',' . assignment

    ID  shift, and go to state 46

    assignment  go to state 47
    identifier  go to state 48


State 35

   81 identifier: identifier '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 49


State 36

   44 assignment: identifier '=' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 61
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 37

   63 const_list: ID '=' . literal

    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '-'                 shift, and go to state 68
    '{'                 shift, and go to state 60

    literal        go to state 69
    array_literal  go to state 66


State 38

   59 const_decl: CONST type const_list SEMICOLON .

    $default  reduce using rule 59 (const_decl)


State 39

   60 const_list: const_list ',' . ID '=' STRING_LITERAL
   61           | const_list ',' . ID

    ID  shift, and go to state 70


State 40

   67 func_decl: VOID ID '(' ')' . SEMICOLON
   74 func_def: VOID ID '(' ')' . compound_stmt

    SEMICOLON  shift, and go to state 71
    '{'        shift, and go to state 72

    compound_stmt  go to state 73


State 41

   66 func_decl: VOID ID '(' arg_list . ')' SEMICOLON
   68 arg_list: arg_list . ',' argument
   73 func_def: VOID ID '(' arg_list . ')' compound_stmt

    ')'  shift, and go to state 74
    ','  shift, and go to state 75


State 42

   69 arg_list: argument .

    $default  reduce using rule 69 (arg_list)


State 43

   70 argument: type . identifier

    ID  shift, and go to state 46

    identifier  go to state 76


State 44

   65 func_decl: type ID '(' ')' . SEMICOLON
   72 func_def: type ID '(' ')' . compound_stmt

    SEMICOLON  shift, and go to state 77
    '{'        shift, and go to state 72

    compound_stmt  go to state 78


State 45

   64 func_decl: type ID '(' arg_list . ')' SEMICOLON
   68 arg_list: arg_list . ',' argument
   71 func_def: type ID '(' arg_list . ')' compound_stmt

    ')'  shift, and go to state 79
    ','  shift, and go to state 75


State 46

   80 identifier: ID .

    $default  reduce using rule 80 (identifier)


State 47

   41 identifier_list: identifier_list ',' assignment .

    $default  reduce using rule 41 (identifier_list)


State 48

   40 identifier_list: identifier_list ',' identifier .
   44 assignment: identifier . '=' expr
   81 identifier: identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 35
    '='  shift, and go to state 36

    $default  reduce using rule 40 (identifier_list)


State 49

   81 identifier: identifier '[' INT_LITERAL . ']'

    ']'  shift, and go to state 80


State 50

   28 expr: ID .
   34 array_ref: ID . '[' expr ']'
   35 func_invoke: ID . '(' param_list ')'
   36            | ID . '(' ')'
   80 identifier: ID .

    '('  shift, and go to state 81
    '['  shift, and go to state 82

    '('       [reduce using rule 28 (expr)]
    '['       [reduce using rule 80 (identifier)]
    '='       reduce using rule 80 (identifier)
    $default  reduce using rule 28 (expr)


State 51

   53 literal: TRUE .

    $default  reduce using rule 53 (literal)


State 52

   54 literal: FALSE .

    $default  reduce using rule 54 (literal)


State 53

   45 literal: STRING_LITERAL .

    $default  reduce using rule 45 (literal)


State 54

   46 literal: FLOAT_LITERAL .

    $default  reduce using rule 46 (literal)


State 55

   47 literal: INT_LITERAL .

    $default  reduce using rule 47 (literal)


State 56

   48 literal: SCIENTIFIC_LITERAL .

    $default  reduce using rule 48 (literal)


State 57

   27 expr: '!' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 83
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 58

   26 expr: '-' . expr
   49 literal: '-' . FLOAT_LITERAL
   50        | '-' . INT_LITERAL
   51        | '-' . SCIENTIFIC_LITERAL

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 84
    INT_LITERAL         shift, and go to state 85
    SCIENTIFIC_LITERAL  shift, and go to state 86
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 87
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 59

   25 expr: '(' . expr ')'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 88
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 60

   55 array_literal: '{' . element_list '}'
   56              | '{' . '}'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60
    '}'                 shift, and go to state 89

    expr           go to state 90
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    element_list   go to state 91
    identifier     go to state 67


State 61

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   44 assignment: identifier '=' expr .

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    OR        [reduce using rule 44 (assignment)]
    AND       [reduce using rule 44 (assignment)]
    EQ        [reduce using rule 44 (assignment)]
    NEQ       [reduce using rule 44 (assignment)]
    GEQ       [reduce using rule 44 (assignment)]
    LEQ       [reduce using rule 44 (assignment)]
    '<'       [reduce using rule 44 (assignment)]
    '>'       [reduce using rule 44 (assignment)]
    '+'       [reduce using rule 44 (assignment)]
    '-'       [reduce using rule 44 (assignment)]
    '*'       [reduce using rule 44 (assignment)]
    '/'       [reduce using rule 44 (assignment)]
    '%'       [reduce using rule 44 (assignment)]
    $default  reduce using rule 44 (assignment)


State 62

   31 expr: array_ref .
   33 array_ref: array_ref . '[' expr ']'

    '['  shift, and go to state 105

    $default  reduce using rule 31 (expr)


State 63

   30 expr: func_invoke .

    $default  reduce using rule 30 (expr)


State 64

   32 expr: assignment .

    $default  reduce using rule 32 (expr)


State 65

   29 expr: literal .

    $default  reduce using rule 29 (expr)


State 66

   52 literal: array_literal .

    $default  reduce using rule 52 (literal)


State 67

   44 assignment: identifier . '=' expr
   81 identifier: identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 35
    '='  shift, and go to state 36


State 68

   49 literal: '-' . FLOAT_LITERAL
   50        | '-' . INT_LITERAL
   51        | '-' . SCIENTIFIC_LITERAL

    FLOAT_LITERAL       shift, and go to state 106
    INT_LITERAL         shift, and go to state 107
    SCIENTIFIC_LITERAL  shift, and go to state 108


State 69

   63 const_list: ID '=' literal .

    $default  reduce using rule 63 (const_list)


State 70

   60 const_list: const_list ',' ID . '=' STRING_LITERAL
   61           | const_list ',' ID .

    '='  shift, and go to state 109

    $default  reduce using rule 61 (const_list)


State 71

   67 func_decl: VOID ID '(' ')' SEMICOLON .

    $default  reduce using rule 67 (func_decl)


State 72

   92 compound_stmt: '{' . block '}'
   93              | '{' . '}'

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    INT                 shift, and go to state 1
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    CONST               shift, and go to state 2
    READ                shift, and go to state 116
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121
    '}'                 shift, and go to state 122

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    var_decl       go to state 125
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    const_decl     go to state 126
    type           go to state 127
    identifier     go to state 67
    stmt           go to state 128
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    block          go to state 131
    block_element  go to state 132
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 73

   74 func_def: VOID ID '(' ')' compound_stmt .

    $default  reduce using rule 74 (func_def)


State 74

   66 func_decl: VOID ID '(' arg_list ')' . SEMICOLON
   73 func_def: VOID ID '(' arg_list ')' . compound_stmt

    SEMICOLON  shift, and go to state 140
    '{'        shift, and go to state 72

    compound_stmt  go to state 141


State 75

   68 arg_list: arg_list ',' . argument

    INT     shift, and go to state 1
    BOOL    shift, and go to state 3
    FLOAT   shift, and go to state 5
    DOUBLE  shift, and go to state 6
    STRING  shift, and go to state 7

    argument  go to state 142
    type      go to state 43


State 76

   70 argument: type identifier .
   81 identifier: identifier . '[' INT_LITERAL ']'

    '['  shift, and go to state 35

    $default  reduce using rule 70 (argument)


State 77

   65 func_decl: type ID '(' ')' SEMICOLON .

    $default  reduce using rule 65 (func_decl)


State 78

   72 func_def: type ID '(' ')' compound_stmt .

    $default  reduce using rule 72 (func_def)


State 79

   64 func_decl: type ID '(' arg_list ')' . SEMICOLON
   71 func_def: type ID '(' arg_list ')' . compound_stmt

    SEMICOLON  shift, and go to state 143
    '{'        shift, and go to state 72

    compound_stmt  go to state 144


State 80

   81 identifier: identifier '[' INT_LITERAL ']' .

    $default  reduce using rule 81 (identifier)


State 81

   35 func_invoke: ID '(' . param_list ')'
   36            | ID '(' . ')'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 145
    '{'                 shift, and go to state 60

    expr           go to state 146
    array_ref      go to state 62
    func_invoke    go to state 63
    param_list     go to state 147
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 82

   34 array_ref: ID '[' . expr ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 148
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 83

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   27     | '!' expr .

    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 27 (expr)


State 84

   46 literal: FLOAT_LITERAL .
   49        | '-' FLOAT_LITERAL .

    SEMICOLON           reduce using rule 46 (literal)
    SEMICOLON           [reduce using rule 49 (literal)]
    ID                  reduce using rule 46 (literal)
    ID                  [reduce using rule 49 (literal)]
    INT                 reduce using rule 46 (literal)
    INT                 [reduce using rule 49 (literal)]
    WHILE               reduce using rule 46 (literal)
    WHILE               [reduce using rule 49 (literal)]
    DO                  reduce using rule 46 (literal)
    DO                  [reduce using rule 49 (literal)]
    IF                  reduce using rule 46 (literal)
    IF                  [reduce using rule 49 (literal)]
    ELSE                reduce using rule 46 (literal)
    ELSE                [reduce using rule 49 (literal)]
    TRUE                reduce using rule 46 (literal)
    TRUE                [reduce using rule 49 (literal)]
    FALSE               reduce using rule 46 (literal)
    FALSE               [reduce using rule 49 (literal)]
    FOR                 reduce using rule 46 (literal)
    FOR                 [reduce using rule 49 (literal)]
    CONST               reduce using rule 46 (literal)
    CONST               [reduce using rule 49 (literal)]
    READ                reduce using rule 46 (literal)
    READ                [reduce using rule 49 (literal)]
    BOOL                reduce using rule 46 (literal)
    BOOL                [reduce using rule 49 (literal)]
    FLOAT               reduce using rule 46 (literal)
    FLOAT               [reduce using rule 49 (literal)]
    DOUBLE              reduce using rule 46 (literal)
    DOUBLE              [reduce using rule 49 (literal)]
    STRING              reduce using rule 46 (literal)
    STRING              [reduce using rule 49 (literal)]
    CONTINUE            reduce using rule 46 (literal)
    CONTINUE            [reduce using rule 49 (literal)]
    BREAK               reduce using rule 46 (literal)
    BREAK               [reduce using rule 49 (literal)]
    RETURN              reduce using rule 46 (literal)
    RETURN              [reduce using rule 49 (literal)]
    PRINT               reduce using rule 46 (literal)
    PRINT               [reduce using rule 49 (literal)]
    STRING_LITERAL      reduce using rule 46 (literal)
    STRING_LITERAL      [reduce using rule 49 (literal)]
    FLOAT_LITERAL       reduce using rule 46 (literal)
    FLOAT_LITERAL       [reduce using rule 49 (literal)]
    INT_LITERAL         reduce using rule 46 (literal)
    INT_LITERAL         [reduce using rule 49 (literal)]
    SCIENTIFIC_LITERAL  reduce using rule 46 (literal)
    SCIENTIFIC_LITERAL  [reduce using rule 49 (literal)]
    OR                  reduce using rule 46 (literal)
    OR                  [reduce using rule 49 (literal)]
    AND                 reduce using rule 46 (literal)
    AND                 [reduce using rule 49 (literal)]
    EQ                  reduce using rule 46 (literal)
    EQ                  [reduce using rule 49 (literal)]
    NEQ                 reduce using rule 46 (literal)
    NEQ                 [reduce using rule 49 (literal)]
    GEQ                 reduce using rule 46 (literal)
    GEQ                 [reduce using rule 49 (literal)]
    LEQ                 reduce using rule 46 (literal)
    LEQ                 [reduce using rule 49 (literal)]
    '!'                 reduce using rule 46 (literal)
    '!'                 [reduce using rule 49 (literal)]
    '<'                 reduce using rule 46 (literal)
    '<'                 [reduce using rule 49 (literal)]
    '>'                 reduce using rule 46 (literal)
    '>'                 [reduce using rule 49 (literal)]
    '+'                 reduce using rule 46 (literal)
    '+'                 [reduce using rule 49 (literal)]
    '-'                 reduce using rule 46 (literal)
    '-'                 [reduce using rule 49 (literal)]
    '*'                 reduce using rule 46 (literal)
    '*'                 [reduce using rule 49 (literal)]
    '/'                 reduce using rule 46 (literal)
    '/'                 [reduce using rule 49 (literal)]
    '%'                 reduce using rule 46 (literal)
    '%'                 [reduce using rule 49 (literal)]
    '('                 reduce using rule 46 (literal)
    '('                 [reduce using rule 49 (literal)]
    ')'                 reduce using rule 46 (literal)
    ')'                 [reduce using rule 49 (literal)]
    ']'                 reduce using rule 46 (literal)
    ']'                 [reduce using rule 49 (literal)]
    ','                 reduce using rule 46 (literal)
    ','                 [reduce using rule 49 (literal)]
    '{'                 reduce using rule 46 (literal)
    '{'                 [reduce using rule 49 (literal)]
    '}'                 reduce using rule 46 (literal)
    '}'                 [reduce using rule 49 (literal)]
    $default            reduce using rule 46 (literal)


State 85

   47 literal: INT_LITERAL .
   50        | '-' INT_LITERAL .

    SEMICOLON           reduce using rule 47 (literal)
    SEMICOLON           [reduce using rule 50 (literal)]
    ID                  reduce using rule 47 (literal)
    ID                  [reduce using rule 50 (literal)]
    INT                 reduce using rule 47 (literal)
    INT                 [reduce using rule 50 (literal)]
    WHILE               reduce using rule 47 (literal)
    WHILE               [reduce using rule 50 (literal)]
    DO                  reduce using rule 47 (literal)
    DO                  [reduce using rule 50 (literal)]
    IF                  reduce using rule 47 (literal)
    IF                  [reduce using rule 50 (literal)]
    ELSE                reduce using rule 47 (literal)
    ELSE                [reduce using rule 50 (literal)]
    TRUE                reduce using rule 47 (literal)
    TRUE                [reduce using rule 50 (literal)]
    FALSE               reduce using rule 47 (literal)
    FALSE               [reduce using rule 50 (literal)]
    FOR                 reduce using rule 47 (literal)
    FOR                 [reduce using rule 50 (literal)]
    CONST               reduce using rule 47 (literal)
    CONST               [reduce using rule 50 (literal)]
    READ                reduce using rule 47 (literal)
    READ                [reduce using rule 50 (literal)]
    BOOL                reduce using rule 47 (literal)
    BOOL                [reduce using rule 50 (literal)]
    FLOAT               reduce using rule 47 (literal)
    FLOAT               [reduce using rule 50 (literal)]
    DOUBLE              reduce using rule 47 (literal)
    DOUBLE              [reduce using rule 50 (literal)]
    STRING              reduce using rule 47 (literal)
    STRING              [reduce using rule 50 (literal)]
    CONTINUE            reduce using rule 47 (literal)
    CONTINUE            [reduce using rule 50 (literal)]
    BREAK               reduce using rule 47 (literal)
    BREAK               [reduce using rule 50 (literal)]
    RETURN              reduce using rule 47 (literal)
    RETURN              [reduce using rule 50 (literal)]
    PRINT               reduce using rule 47 (literal)
    PRINT               [reduce using rule 50 (literal)]
    STRING_LITERAL      reduce using rule 47 (literal)
    STRING_LITERAL      [reduce using rule 50 (literal)]
    FLOAT_LITERAL       reduce using rule 47 (literal)
    FLOAT_LITERAL       [reduce using rule 50 (literal)]
    INT_LITERAL         reduce using rule 47 (literal)
    INT_LITERAL         [reduce using rule 50 (literal)]
    SCIENTIFIC_LITERAL  reduce using rule 47 (literal)
    SCIENTIFIC_LITERAL  [reduce using rule 50 (literal)]
    OR                  reduce using rule 47 (literal)
    OR                  [reduce using rule 50 (literal)]
    AND                 reduce using rule 47 (literal)
    AND                 [reduce using rule 50 (literal)]
    EQ                  reduce using rule 47 (literal)
    EQ                  [reduce using rule 50 (literal)]
    NEQ                 reduce using rule 47 (literal)
    NEQ                 [reduce using rule 50 (literal)]
    GEQ                 reduce using rule 47 (literal)
    GEQ                 [reduce using rule 50 (literal)]
    LEQ                 reduce using rule 47 (literal)
    LEQ                 [reduce using rule 50 (literal)]
    '!'                 reduce using rule 47 (literal)
    '!'                 [reduce using rule 50 (literal)]
    '<'                 reduce using rule 47 (literal)
    '<'                 [reduce using rule 50 (literal)]
    '>'                 reduce using rule 47 (literal)
    '>'                 [reduce using rule 50 (literal)]
    '+'                 reduce using rule 47 (literal)
    '+'                 [reduce using rule 50 (literal)]
    '-'                 reduce using rule 47 (literal)
    '-'                 [reduce using rule 50 (literal)]
    '*'                 reduce using rule 47 (literal)
    '*'                 [reduce using rule 50 (literal)]
    '/'                 reduce using rule 47 (literal)
    '/'                 [reduce using rule 50 (literal)]
    '%'                 reduce using rule 47 (literal)
    '%'                 [reduce using rule 50 (literal)]
    '('                 reduce using rule 47 (literal)
    '('                 [reduce using rule 50 (literal)]
    ')'                 reduce using rule 47 (literal)
    ')'                 [reduce using rule 50 (literal)]
    ']'                 reduce using rule 47 (literal)
    ']'                 [reduce using rule 50 (literal)]
    ','                 reduce using rule 47 (literal)
    ','                 [reduce using rule 50 (literal)]
    '{'                 reduce using rule 47 (literal)
    '{'                 [reduce using rule 50 (literal)]
    '}'                 reduce using rule 47 (literal)
    '}'                 [reduce using rule 50 (literal)]
    $default            reduce using rule 47 (literal)


State 86

   48 literal: SCIENTIFIC_LITERAL .
   51        | '-' SCIENTIFIC_LITERAL .

    SEMICOLON           reduce using rule 48 (literal)
    SEMICOLON           [reduce using rule 51 (literal)]
    ID                  reduce using rule 48 (literal)
    ID                  [reduce using rule 51 (literal)]
    INT                 reduce using rule 48 (literal)
    INT                 [reduce using rule 51 (literal)]
    WHILE               reduce using rule 48 (literal)
    WHILE               [reduce using rule 51 (literal)]
    DO                  reduce using rule 48 (literal)
    DO                  [reduce using rule 51 (literal)]
    IF                  reduce using rule 48 (literal)
    IF                  [reduce using rule 51 (literal)]
    ELSE                reduce using rule 48 (literal)
    ELSE                [reduce using rule 51 (literal)]
    TRUE                reduce using rule 48 (literal)
    TRUE                [reduce using rule 51 (literal)]
    FALSE               reduce using rule 48 (literal)
    FALSE               [reduce using rule 51 (literal)]
    FOR                 reduce using rule 48 (literal)
    FOR                 [reduce using rule 51 (literal)]
    CONST               reduce using rule 48 (literal)
    CONST               [reduce using rule 51 (literal)]
    READ                reduce using rule 48 (literal)
    READ                [reduce using rule 51 (literal)]
    BOOL                reduce using rule 48 (literal)
    BOOL                [reduce using rule 51 (literal)]
    FLOAT               reduce using rule 48 (literal)
    FLOAT               [reduce using rule 51 (literal)]
    DOUBLE              reduce using rule 48 (literal)
    DOUBLE              [reduce using rule 51 (literal)]
    STRING              reduce using rule 48 (literal)
    STRING              [reduce using rule 51 (literal)]
    CONTINUE            reduce using rule 48 (literal)
    CONTINUE            [reduce using rule 51 (literal)]
    BREAK               reduce using rule 48 (literal)
    BREAK               [reduce using rule 51 (literal)]
    RETURN              reduce using rule 48 (literal)
    RETURN              [reduce using rule 51 (literal)]
    PRINT               reduce using rule 48 (literal)
    PRINT               [reduce using rule 51 (literal)]
    STRING_LITERAL      reduce using rule 48 (literal)
    STRING_LITERAL      [reduce using rule 51 (literal)]
    FLOAT_LITERAL       reduce using rule 48 (literal)
    FLOAT_LITERAL       [reduce using rule 51 (literal)]
    INT_LITERAL         reduce using rule 48 (literal)
    INT_LITERAL         [reduce using rule 51 (literal)]
    SCIENTIFIC_LITERAL  reduce using rule 48 (literal)
    SCIENTIFIC_LITERAL  [reduce using rule 51 (literal)]
    OR                  reduce using rule 48 (literal)
    OR                  [reduce using rule 51 (literal)]
    AND                 reduce using rule 48 (literal)
    AND                 [reduce using rule 51 (literal)]
    EQ                  reduce using rule 48 (literal)
    EQ                  [reduce using rule 51 (literal)]
    NEQ                 reduce using rule 48 (literal)
    NEQ                 [reduce using rule 51 (literal)]
    GEQ                 reduce using rule 48 (literal)
    GEQ                 [reduce using rule 51 (literal)]
    LEQ                 reduce using rule 48 (literal)
    LEQ                 [reduce using rule 51 (literal)]
    '!'                 reduce using rule 48 (literal)
    '!'                 [reduce using rule 51 (literal)]
    '<'                 reduce using rule 48 (literal)
    '<'                 [reduce using rule 51 (literal)]
    '>'                 reduce using rule 48 (literal)
    '>'                 [reduce using rule 51 (literal)]
    '+'                 reduce using rule 48 (literal)
    '+'                 [reduce using rule 51 (literal)]
    '-'                 reduce using rule 48 (literal)
    '-'                 [reduce using rule 51 (literal)]
    '*'                 reduce using rule 48 (literal)
    '*'                 [reduce using rule 51 (literal)]
    '/'                 reduce using rule 48 (literal)
    '/'                 [reduce using rule 51 (literal)]
    '%'                 reduce using rule 48 (literal)
    '%'                 [reduce using rule 51 (literal)]
    '('                 reduce using rule 48 (literal)
    '('                 [reduce using rule 51 (literal)]
    ')'                 reduce using rule 48 (literal)
    ')'                 [reduce using rule 51 (literal)]
    ']'                 reduce using rule 48 (literal)
    ']'                 [reduce using rule 51 (literal)]
    ','                 reduce using rule 48 (literal)
    ','                 [reduce using rule 51 (literal)]
    '{'                 reduce using rule 48 (literal)
    '{'                 [reduce using rule 51 (literal)]
    '}'                 reduce using rule 48 (literal)
    '}'                 [reduce using rule 51 (literal)]
    $default            reduce using rule 48 (literal)


State 87

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   26     | '-' expr .

    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 26 (expr)


State 88

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   25     | '(' expr . ')'

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104
    ')'  shift, and go to state 149


State 89

   56 array_literal: '{' '}' .

    $default  reduce using rule 56 (array_literal)


State 90

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   58 element_list: expr .

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 58 (element_list)


State 91

   55 array_literal: '{' element_list . '}'
   57 element_list: element_list . ',' expr

    ','  shift, and go to state 150
    '}'  shift, and go to state 151


State 92

   12 expr: expr OR . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 152
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 93

   13 expr: expr AND . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 153
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 94

   14 expr: expr EQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 154
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 95

   15 expr: expr NEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 155
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 96

   16 expr: expr GEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 156
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 97

   17 expr: expr LEQ . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 157
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 98

   19 expr: expr '<' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 158
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 99

   18 expr: expr '>' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 159
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 100

   20 expr: expr '+' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 160
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 101

   21 expr: expr '-' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 161
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 102

   22 expr: expr '*' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 162
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 103

   23 expr: expr '/' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 163
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 104

   24 expr: expr '%' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 164
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 105

   33 array_ref: array_ref '[' . expr ']'

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 165
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 106

   49 literal: '-' FLOAT_LITERAL .

    $default  reduce using rule 49 (literal)


State 107

   50 literal: '-' INT_LITERAL .

    $default  reduce using rule 50 (literal)


State 108

   51 literal: '-' SCIENTIFIC_LITERAL .

    $default  reduce using rule 51 (literal)


State 109

   60 const_list: const_list ',' ID '=' . STRING_LITERAL

    STRING_LITERAL  shift, and go to state 166


State 110

   91 expr_stmt: SEMICOLON .

    $default  reduce using rule 91 (expr_stmt)


State 111

   28 expr: ID .
   34 array_ref: ID . '[' expr ']'
   35 func_invoke: ID . '(' param_list ')'
   36            | ID . '(' ')'
   80 identifier: ID .
  102 variable_ref: ID .

    '('  shift, and go to state 81
    '['  shift, and go to state 82

    '['       [reduce using rule 80 (identifier)]
    '='       reduce using rule 80 (identifier)
    '='       [reduce using rule 102 (variable_ref)]
    $default  reduce using rule 28 (expr)


State 112

  106 while_stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 167


State 113

  107 do_stmt: DO . stmt WHILE '(' expr ')' SEMICOLON

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    READ                shift, and go to state 116
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    stmt           go to state 168
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 114

  104 if_stmt: IF . '(' expr ')' stmt
  105        | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 169


State 115

  108 for_stmt: FOR . '(' expr_stmt expr_stmt ')' stmt
  109         | FOR . '(' expr_stmt expr_stmt expr ')' stmt

    '('  shift, and go to state 170


State 116

  101 simple_stmt: READ . variable_ref

    ID  shift, and go to state 171

    array_ref     go to state 172
    variable_ref  go to state 173


State 117

  112 jump_stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 174


State 118

  111 jump_stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 175


State 119

  110 jump_stmt: RETURN . expr_stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 123
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    expr_stmt      go to state 176


State 120

  100 simple_stmt: PRINT . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 177
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 121

   55 array_literal: '{' . element_list '}'
   56              | '{' . '}'
   92 compound_stmt: '{' . block '}'
   93              | '{' . '}'

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    INT                 shift, and go to state 1
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    CONST               shift, and go to state 2
    READ                shift, and go to state 116
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121
    '}'                 shift, and go to state 178

    expr           go to state 179
    array_ref      go to state 124
    func_invoke    go to state 63
    var_decl       go to state 125
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    element_list   go to state 91
    const_decl     go to state 126
    type           go to state 127
    identifier     go to state 67
    stmt           go to state 128
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    block          go to state 131
    block_element  go to state 132
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 122

   93 compound_stmt: '{' '}' .

    $default  reduce using rule 93 (compound_stmt)


State 123

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   90 expr_stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 180
    OR         shift, and go to state 92
    AND        shift, and go to state 93
    EQ         shift, and go to state 94
    NEQ        shift, and go to state 95
    GEQ        shift, and go to state 96
    LEQ        shift, and go to state 97
    '<'        shift, and go to state 98
    '>'        shift, and go to state 99
    '+'        shift, and go to state 100
    '-'        shift, and go to state 101
    '*'        shift, and go to state 102
    '/'        shift, and go to state 103
    '%'        shift, and go to state 104


State 124

   31 expr: array_ref .
   33 array_ref: array_ref . '[' expr ']'
  103 variable_ref: array_ref .

    '['  shift, and go to state 105

    '='       reduce using rule 103 (variable_ref)
    $default  reduce using rule 31 (expr)


State 125

   96 block_element: var_decl .

    $default  reduce using rule 96 (block_element)


State 126

   97 block_element: const_decl .

    $default  reduce using rule 97 (block_element)


State 127

   39 var_decl: type . identifier_list SEMICOLON

    ID  shift, and go to state 46

    identifier_list  go to state 24
    assignment       go to state 25
    identifier       go to state 26


State 128

   98 block_element: stmt .

    $default  reduce using rule 98 (block_element)


State 129

   89 stmt: expr_stmt .

    $default  reduce using rule 89 (stmt)


State 130

   82 stmt: compound_stmt .

    $default  reduce using rule 82 (stmt)


State 131

   92 compound_stmt: '{' block . '}'
   94 block: block . block_element

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    INT                 shift, and go to state 1
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    CONST               shift, and go to state 2
    READ                shift, and go to state 116
    BOOL                shift, and go to state 3
    FLOAT               shift, and go to state 5
    DOUBLE              shift, and go to state 6
    STRING              shift, and go to state 7
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121
    '}'                 shift, and go to state 181

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    var_decl       go to state 125
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    const_decl     go to state 126
    type           go to state 127
    identifier     go to state 67
    stmt           go to state 128
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    block_element  go to state 182
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 132

   95 block: block_element .

    $default  reduce using rule 95 (block)


State 133

   83 stmt: simple_stmt .

    $default  reduce using rule 83 (stmt)


State 134

   99 simple_stmt: variable_ref . '=' expr SEMICOLON

    '='  shift, and go to state 183


State 135

   84 stmt: if_stmt .

    $default  reduce using rule 84 (stmt)


State 136

   85 stmt: while_stmt .

    $default  reduce using rule 85 (stmt)


State 137

   86 stmt: do_stmt .

    $default  reduce using rule 86 (stmt)


State 138

   87 stmt: for_stmt .

    $default  reduce using rule 87 (stmt)


State 139

   88 stmt: jump_stmt .

    $default  reduce using rule 88 (stmt)


State 140

   66 func_decl: VOID ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 66 (func_decl)


State 141

   73 func_def: VOID ID '(' arg_list ')' compound_stmt .

    $default  reduce using rule 73 (func_def)


State 142

   68 arg_list: arg_list ',' argument .

    $default  reduce using rule 68 (arg_list)


State 143

   64 func_decl: type ID '(' arg_list ')' SEMICOLON .

    $default  reduce using rule 64 (func_decl)


State 144

   71 func_def: type ID '(' arg_list ')' compound_stmt .

    $default  reduce using rule 71 (func_def)


State 145

   36 func_invoke: ID '(' ')' .

    $default  reduce using rule 36 (func_invoke)


State 146

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   38 param_list: expr .

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 38 (param_list)


State 147

   35 func_invoke: ID '(' param_list . ')'
   37 param_list: param_list . ',' expr

    ')'  shift, and go to state 184
    ','  shift, and go to state 185


State 148

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   34 array_ref: ID '[' expr . ']'

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104
    ']'  shift, and go to state 186


State 149

   25 expr: '(' expr ')' .

    $default  reduce using rule 25 (expr)


State 150

   57 element_list: element_list ',' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 187
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 151

   55 array_literal: '{' element_list '}' .

    $default  reduce using rule 55 (array_literal)


State 152

   12 expr: expr . OR expr
   12     | expr OR expr .
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 12 (expr)


State 153

   12 expr: expr . OR expr
   13     | expr . AND expr
   13     | expr AND expr .
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 13 (expr)


State 154

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   14     | expr EQ expr .
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 14 (expr)


State 155

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   15     | expr NEQ expr .
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 15 (expr)


State 156

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   16     | expr GEQ expr .
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 16 (expr)


State 157

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   17     | expr LEQ expr .
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 17 (expr)


State 158

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   19     | expr '<' expr .
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 19 (expr)


State 159

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   18     | expr '>' expr .
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 18 (expr)


State 160

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   20     | expr '+' expr .
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 20 (expr)


State 161

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr

    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 21 (expr)


State 162

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '%' expr

    $default  reduce using rule 22 (expr)


State 163

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '%' expr

    $default  reduce using rule 23 (expr)


State 164

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   24     | expr '%' expr .

    $default  reduce using rule 24 (expr)


State 165

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   33 array_ref: array_ref '[' expr . ']'

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104
    ']'  shift, and go to state 188


State 166

   60 const_list: const_list ',' ID '=' STRING_LITERAL .

    $default  reduce using rule 60 (const_list)


State 167

  106 while_stmt: WHILE '(' . expr ')' stmt

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 189
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 168

  107 do_stmt: DO stmt . WHILE '(' expr ')' SEMICOLON

    WHILE  shift, and go to state 190


State 169

  104 if_stmt: IF '(' . expr ')' stmt
  105        | IF '(' . expr ')' stmt ELSE stmt

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 191
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 170

  108 for_stmt: FOR '(' . expr_stmt expr_stmt ')' stmt
  109         | FOR '(' . expr_stmt expr_stmt expr ')' stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 123
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    expr_stmt      go to state 192


State 171

   34 array_ref: ID . '[' expr ']'
  102 variable_ref: ID .

    '['  shift, and go to state 82

    $default  reduce using rule 102 (variable_ref)


State 172

   33 array_ref: array_ref . '[' expr ']'
  103 variable_ref: array_ref .

    '['  shift, and go to state 105

    $default  reduce using rule 103 (variable_ref)


State 173

  101 simple_stmt: READ variable_ref .

    $default  reduce using rule 101 (simple_stmt)


State 174

  112 jump_stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 112 (jump_stmt)


State 175

  111 jump_stmt: BREAK SEMICOLON .

    $default  reduce using rule 111 (jump_stmt)


State 176

  110 jump_stmt: RETURN expr_stmt .

    $default  reduce using rule 110 (jump_stmt)


State 177

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  100 simple_stmt: PRINT expr .

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    '-'       [reduce using rule 100 (simple_stmt)]
    $default  reduce using rule 100 (simple_stmt)


State 178

   56 array_literal: '{' '}' .
   93 compound_stmt: '{' '}' .

    SEMICOLON  reduce using rule 56 (array_literal)
    SEMICOLON  [reduce using rule 93 (compound_stmt)]
    OR         reduce using rule 56 (array_literal)
    AND        reduce using rule 56 (array_literal)
    EQ         reduce using rule 56 (array_literal)
    NEQ        reduce using rule 56 (array_literal)
    GEQ        reduce using rule 56 (array_literal)
    LEQ        reduce using rule 56 (array_literal)
    '<'        reduce using rule 56 (array_literal)
    '>'        reduce using rule 56 (array_literal)
    '+'        reduce using rule 56 (array_literal)
    '-'        reduce using rule 56 (array_literal)
    '-'        [reduce using rule 93 (compound_stmt)]
    '*'        reduce using rule 56 (array_literal)
    '/'        reduce using rule 56 (array_literal)
    '%'        reduce using rule 56 (array_literal)
    ','        reduce using rule 56 (array_literal)
    '}'        reduce using rule 56 (array_literal)
    '}'        [reduce using rule 93 (compound_stmt)]
    $default   reduce using rule 93 (compound_stmt)


State 179

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   58 element_list: expr .
   90 expr_stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 180
    OR         shift, and go to state 92
    AND        shift, and go to state 93
    EQ         shift, and go to state 94
    NEQ        shift, and go to state 95
    GEQ        shift, and go to state 96
    LEQ        shift, and go to state 97
    '<'        shift, and go to state 98
    '>'        shift, and go to state 99
    '+'        shift, and go to state 100
    '-'        shift, and go to state 101
    '*'        shift, and go to state 102
    '/'        shift, and go to state 103
    '%'        shift, and go to state 104

    $default  reduce using rule 58 (element_list)


State 180

   90 expr_stmt: expr SEMICOLON .

    $default  reduce using rule 90 (expr_stmt)


State 181

   92 compound_stmt: '{' block '}' .

    $default  reduce using rule 92 (compound_stmt)


State 182

   94 block: block block_element .

    $default  reduce using rule 94 (block)


State 183

   99 simple_stmt: variable_ref '=' . expr SEMICOLON

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 193
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 184

   35 func_invoke: ID '(' param_list ')' .

    $default  reduce using rule 35 (func_invoke)


State 185

   37 param_list: param_list ',' . expr

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 194
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 186

   34 array_ref: ID '[' expr ']' .

    $default  reduce using rule 34 (array_ref)


State 187

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   57 element_list: element_list ',' expr .

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 57 (element_list)


State 188

   33 array_ref: array_ref '[' expr ']' .

    $default  reduce using rule 33 (array_ref)


State 189

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  106 while_stmt: WHILE '(' expr . ')' stmt

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104
    ')'  shift, and go to state 195


State 190

  107 do_stmt: DO stmt WHILE . '(' expr ')' SEMICOLON

    '('  shift, and go to state 196


State 191

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  104 if_stmt: IF '(' expr . ')' stmt
  105        | IF '(' expr . ')' stmt ELSE stmt

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104
    ')'  shift, and go to state 197


State 192

  108 for_stmt: FOR '(' expr_stmt . expr_stmt ')' stmt
  109         | FOR '(' expr_stmt . expr_stmt expr ')' stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 123
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    expr_stmt      go to state 198


State 193

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   99 simple_stmt: variable_ref '=' expr . SEMICOLON

    SEMICOLON  shift, and go to state 199
    OR         shift, and go to state 92
    AND        shift, and go to state 93
    EQ         shift, and go to state 94
    NEQ        shift, and go to state 95
    GEQ        shift, and go to state 96
    LEQ        shift, and go to state 97
    '<'        shift, and go to state 98
    '>'        shift, and go to state 99
    '+'        shift, and go to state 100
    '-'        shift, and go to state 101
    '*'        shift, and go to state 102
    '/'        shift, and go to state 103
    '%'        shift, and go to state 104


State 194

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
   37 param_list: param_list ',' expr .

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 37 (param_list)


State 195

  106 while_stmt: WHILE '(' expr ')' . stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    READ                shift, and go to state 116
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    stmt           go to state 200
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 196

  107 do_stmt: DO stmt WHILE '(' . expr ')' SEMICOLON

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 60

    expr           go to state 201
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 197

  104 if_stmt: IF '(' expr ')' . stmt
  105        | IF '(' expr ')' . stmt ELSE stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    READ                shift, and go to state 116
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    stmt           go to state 202
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 198

  108 for_stmt: FOR '(' expr_stmt expr_stmt . ')' stmt
  109         | FOR '(' expr_stmt expr_stmt . expr ')' stmt

    ID                  shift, and go to state 50
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    ')'                 shift, and go to state 203
    '{'                 shift, and go to state 60

    expr           go to state 204
    array_ref      go to state 62
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67


State 199

   99 simple_stmt: variable_ref '=' expr SEMICOLON .

    $default  reduce using rule 99 (simple_stmt)


State 200

  106 while_stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 106 (while_stmt)


State 201

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  107 do_stmt: DO stmt WHILE '(' expr . ')' SEMICOLON

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104
    ')'  shift, and go to state 205


State 202

  104 if_stmt: IF '(' expr ')' stmt .
  105        | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 206

    ELSE      [reduce using rule 104 (if_stmt)]
    $default  reduce using rule 104 (if_stmt)


State 203

  108 for_stmt: FOR '(' expr_stmt expr_stmt ')' . stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    READ                shift, and go to state 116
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    stmt           go to state 207
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 204

   12 expr: expr . OR expr
   13     | expr . AND expr
   14     | expr . EQ expr
   15     | expr . NEQ expr
   16     | expr . GEQ expr
   17     | expr . LEQ expr
   18     | expr . '>' expr
   19     | expr . '<' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '%' expr
  109 for_stmt: FOR '(' expr_stmt expr_stmt expr . ')' stmt

    OR   shift, and go to state 92
    AND  shift, and go to state 93
    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    GEQ  shift, and go to state 96
    LEQ  shift, and go to state 97
    '<'  shift, and go to state 98
    '>'  shift, and go to state 99
    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104
    ')'  shift, and go to state 208


State 205

  107 do_stmt: DO stmt WHILE '(' expr ')' . SEMICOLON

    SEMICOLON  shift, and go to state 209


State 206

  105 if_stmt: IF '(' expr ')' stmt ELSE . stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    READ                shift, and go to state 116
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    stmt           go to state 210
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 207

  108 for_stmt: FOR '(' expr_stmt expr_stmt ')' stmt .

    $default  reduce using rule 108 (for_stmt)


State 208

  109 for_stmt: FOR '(' expr_stmt expr_stmt expr ')' . stmt

    SEMICOLON           shift, and go to state 110
    ID                  shift, and go to state 111
    WHILE               shift, and go to state 112
    DO                  shift, and go to state 113
    IF                  shift, and go to state 114
    TRUE                shift, and go to state 51
    FALSE               shift, and go to state 52
    FOR                 shift, and go to state 115
    READ                shift, and go to state 116
    CONTINUE            shift, and go to state 117
    BREAK               shift, and go to state 118
    RETURN              shift, and go to state 119
    PRINT               shift, and go to state 120
    STRING_LITERAL      shift, and go to state 53
    FLOAT_LITERAL       shift, and go to state 54
    INT_LITERAL         shift, and go to state 55
    SCIENTIFIC_LITERAL  shift, and go to state 56
    '!'                 shift, and go to state 57
    '-'                 shift, and go to state 58
    '('                 shift, and go to state 59
    '{'                 shift, and go to state 121

    expr           go to state 123
    array_ref      go to state 124
    func_invoke    go to state 63
    assignment     go to state 64
    literal        go to state 65
    array_literal  go to state 66
    identifier     go to state 67
    stmt           go to state 211
    expr_stmt      go to state 129
    compound_stmt  go to state 130
    simple_stmt    go to state 133
    variable_ref   go to state 134
    if_stmt        go to state 135
    while_stmt     go to state 136
    do_stmt        go to state 137
    for_stmt       go to state 138
    jump_stmt      go to state 139


State 209

  107 do_stmt: DO stmt WHILE '(' expr ')' SEMICOLON .

    $default  reduce using rule 107 (do_stmt)


State 210

  105 if_stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 105 (if_stmt)


State 211

  109 for_stmt: FOR '(' expr_stmt expr_stmt expr ')' stmt .

    $default  reduce using rule 109 (for_stmt)
